package cmd

import (
	"github.com/carapace-sh/carapace"
	"github.com/spf13/cobra"
)

var infoCmd = &cobra.Command{
	Use:   "info",
	Short: "Displays runtime info about the %{product} server.",
	Run:   func(cmd *cobra.Command, args []string) {},
}

func init() {
	carapace.Gen(infoCmd).Standalone()

	infoCmd.Flags().Bool("allow_analysis_cache_discard", false, "If discarding the analysis cache due to a change in the build system, setting this option to false will cause bazel to exit, rather than continuing with the build. This option has no effect when 'discard_analysis_cache' is also set.")
	infoCmd.Flags().Bool("allowed_local_actions_regex", false, "A regex whitelist for action types which may be run locally. If unset, all actions are allowed to execute locally")
	infoCmd.Flags().Bool("analyze", false, "Execute the loading/analysis phase; this is the usual behaviour. Specifying --noanalyzecauses the build to stop before starting the loading/analysis phase, just doing target pattern parsing and returning zero iff that completed successfully; this mode is useful for testing.")
	infoCmd.Flags().Bool("aspects", false, "Comma-separated list of aspects to be applied to top-level targets. In the list, if aspect some_aspect specifies required aspect providers via required_aspect_providers, some_aspect will run after every aspect that was mentioned before it in the aspects list whose advertised providers satisfy some_aspect required aspect providers. Moreover, some_aspect will run after all its required aspects specified by requires attribute. some_aspect will then have access to the values of those aspects' providers. <bzl-file-label>%<aspect_name>, for example '//tools:my_def.bzl%my_aspect', where 'my_aspect' is a top-level value from a file tools/my_def.bzl")
	infoCmd.Flags().Bool("aspects_parameters", false, "Specifies the values of the command-line aspects parameters. Each parameter value is specified via <param_name>=<param_value>, for example 'my_param=my_val' where 'my_param' is a parameter of some aspect in --aspects list or required by an aspect in the list. This option can be used multiple times. However, it is not allowed to assign values to the same parameter more than once.")
	infoCmd.Flags().Bool("build", false, "Execute the build; this is the usual behaviour. Specifying --nobuild causes the build to stop before executing the build actions, returning zero iff the package loading and analysis phases completed successfully; this mode is useful for testing those phases.")
	infoCmd.Flags().Bool("build_event_upload_max_retries", false, "The maximum number of times Bazel should retry uploading a build event.")
	infoCmd.Flags().Bool("build_manual_tests", false, "Forces test targets tagged 'manual' to be built. 'manual' tests are excluded from processing. This option forces them to be built (but not executed).")
	infoCmd.Flags().Bool("build_tag_filters", false, "Specifies a comma-separated list of tags. Each tag can be optionally preceded with '-' to specify excluded tags. Only those targets will be built that contain at least one included tag and do not contain any excluded tags. This option does not affect the set of tests executed with the 'test' command; those are be governed by the test filtering options, for example '--test_tag_filters'")
	infoCmd.Flags().Bool("build_tests_only", false, "If specified, only *_test and test_suite rules will be built and other targets specified on the command line will be ignored. By default everything that was requested will be built.")
	infoCmd.Flags().Bool("cache_computed_file_digests", false, "If greater than 0, configures Bazel to cache file digests in memory based on their metadata instead of recomputing the digests from disk every time they are needed. Setting this to 0 ensures correctness because not all file changes can be noted from file metadata. When not 0, the number indicates the size of the cache as the number of file digests to be cached.")
	infoCmd.Flags().Bool("check_tests_up_to_date", false, "Don't run tests, just check if they are up-to-date.  If all tests results are up-to-date, the testing completes successfully.  If any test needs to be built or executed, an error is reported and the testing fails.  This option implies --check_up_to_date behavior.")
	infoCmd.Flags().Bool("check_up_to_date", false, "Don't perform the build, just check if it is up-to-date.  If all targets are up-to-date, the build completes successfully.  If any step needs to be executed an error is reported and the build fails.")
	infoCmd.Flags().Bool("compile_one_dependency", false, "Compile a single dependency of the argument files. This is useful for syntax checking source files in IDEs, for example, by rebuilding a single target that depends on the source file to detect errors as early as possible in the edit/build/test cycle. This argument affects the way all non-flag arguments are interpreted; instead of being targets to build they are source filenames.  For each source filename an arbitrary target that depends on it will be built.")
	infoCmd.Flags().Bool("default_visibility", false, "Default visibility for packages that don't set it explicitly ('public' or 'private').")
	infoCmd.Flags().Bool("deleted_packages", false, "A comma-separated list of names of packages which the build system will consider non-existent, even if they are visible somewhere on the package path.")
	infoCmd.Flags().Bool("directory_creation_cache", false, "Describes the cache used to store known regular directories as they're created. Parent directories of output files are created on-demand during action execution.")
	infoCmd.Flags().Bool("discard_analysis_cache", false, "Discard the analysis cache immediately after the analysis phase completes. Reduces memory usage by ~10%, but makes further incremental builds slower.")
	infoCmd.Flags().Bool("enforce_project_configs", false, "If true, interactive builds may only pass the --scl_config build flag; they may not use any other build flags. --scl_config must be set to an officially suported project configuration. Supported configurations are defined in the target's PROJECT.scl, which can be found by walking up the target's packagge path. See b/324126745.")
	infoCmd.Flags().Bool("execution_log_binary_file", false, "Log the executed spawns into this file as length-delimited SpawnExec protos, according to src/main/protobuf/spawn.proto. Prefer --execution_log_compact_file, which is significantly smaller and cheaper to produce. Related flags: --execution_log_compact_file (compact format; mutually exclusive), --execution_log_json_file (text JSON format; mutually exclusive), --execution_log_sort (whether to sort the execution log), --subcommands (for displaying subcommands in terminal output).")
	infoCmd.Flags().Bool("execution_log_compact_file", false, "Log the executed spawns into this file as length-delimited ExecLogEntry protos, according to src/main/protobuf/spawn.proto. The entire file is zstd compressed. Related flags: --execution_log_binary_file (binary protobuf format; mutually exclusive), --execution_log_json_file (text JSON format; mutually exclusive), --subcommands (for displaying subcommands in terminal output).")
	infoCmd.Flags().Bool("execution_log_json_file", false, "Log the executed spawns into this file as newline-delimited JSON representations of SpawnExec protos, according to src/main/protobuf/spawn.proto. Prefer --execution_log_compact_file, which is significantly smaller and cheaper to produce. Related flags: --execution_log_compact_file (compact format; mutually exclusive), --execution_log_binary_file (binary protobuf format; mutually exclusive), --execution_log_sort (whether to sort the execution log), --subcommands (for displaying subcommands in terminal output).")
	infoCmd.Flags().Bool("execution_log_sort", false, "Whether to sort the execution log, making it easier to compare logs across invocations. Set to false to avoid potentially significant CPU and memory usage at the end of the invocation, at the cost of producing the log in nondeterministic execution order. Only applies to the binary and JSON formats; the compact format is never sorted.")
	infoCmd.Flags().Bool("expand_test_suites", false, "Expand test_suite targets into their constituent tests before analysis. When this flag is turned on (the default), negative target patterns will apply to the tests belonging to the test suite, otherwise they will not. Turning off this flag is useful when top-level aspects are applied at command line: then they can analyze test_suite targets.")
	infoCmd.Flags().Bool("experimental_aquery_dump_after_build_format", false, "Writes the state of Skyframe (which includes previous invocations on this blaze instance as well) after a build. Output is streamed remotely unless local output is requested with --experimental_aquery_dump_after_build_output_file.  Does not honor aquery flags for --include_*, but uses the same defaults, except for --include_commandline=false. Possible output formats: proto|streamed_proto|textproto|jsonproto. Using this will disable Skymeld.")
	infoCmd.Flags().Bool("experimental_aquery_dump_after_build_output_file", false, "Specify the output file for the aquery dump after a build. Use in conjunction with --experimental_aquery_dump_after_build_format. The path provided is relative to Bazel's output base, unless it's an absolute path. Using this will disable Skymeld.")
	infoCmd.Flags().Bool("experimental_async_execution", false, "If set to true, Bazel is allowed to run action in a virtual thread. The number of actions in flight is still capped with --jobs.")
	infoCmd.Flags().Bool("experimental_bep_target_summary", false, "Whether to publish TargetSummary events.")
	infoCmd.Flags().Bool("experimental_build_event_expand_filesets", false, "If true, expand Filesets in the BEP when presenting output files.")
	infoCmd.Flags().Bool("experimental_build_event_fully_resolve_fileset_symlinks", false, "If true, fully resolve relative Fileset symlinks in the BEP when presenting output files. Requires --experimental_build_event_expand_filesets.")
	infoCmd.Flags().Bool("experimental_build_event_output_group_mode", false, "Specify how an output group's files will be represented in TargetComplete/AspectComplete BEP events. Values are an assignment of an output group name to one of 'NAMED_SET_OF_FILES_ONLY', 'INLINE_ONLY', or 'BOTH'. The default value is 'NAMED_SET_OF_FILES_ONLY'. If an output group is repeated, the final value to appear is used. The default value sets the mode for coverage artifacts to BOTH: --experimental_build_event_output_group_mode=baseline.lcov=both")
	infoCmd.Flags().Bool("experimental_build_event_upload_retry_minimum_delay", false, "Initial, minimum delay for exponential backoff retries when BEP upload fails. (exponent: 1.6)")
	infoCmd.Flags().Bool("experimental_build_event_upload_strategy", false, "Selects how to upload artifacts referenced in the build event protocol.")
	infoCmd.Flags().Bool("experimental_check_output_files", false, "Check for modifications made to the output files of a build. Consider setting this flag to false if you don't expect these files to change outside of bazel since it will speed up subsequent runs as they won't have to check a previous run's cache.")
	infoCmd.Flags().Bool("experimental_convenience_symlinks", false, "This flag controls how the convenience symlinks (the symlinks that appear in the workspace after the build) will be managed. Possible values:")
	infoCmd.Flags().Bool("experimental_convenience_symlinks_bep_event", false, "This flag controls whether or not we will post the build eventConvenienceSymlinksIdentified to the BuildEventProtocol. If the value is true, the BuildEventProtocol will have an entry for convenienceSymlinksIdentified, listing all of the convenience symlinks created in your workspace. If false, then the convenienceSymlinksIdentified entry in the BuildEventProtocol will be empty.")
	infoCmd.Flags().Bool("experimental_cpu_load_scheduling", false, "Enables the experimental local execution scheduling based on CPU load, not estimation of actions one by one.  Experimental scheduling have showed the large benefit on a large local builds on a powerful machines with the large number of cores. Reccommended to use with --local_resources=cpu=HOST_CPUS")
	infoCmd.Flags().Bool("experimental_cpu_load_scheduling_window_size", false, "The size of window during experimental scheduling of action based on CPU load. Make sense to define only when flag --experimental_cpu_load_scheduling is enabled.")
	infoCmd.Flags().Bool("experimental_enable_critical_path_profiling", false, "If set (the default), critical path profiling is enabled for the execution phase. This has a slight overhead in RAM and CPU, and may prevent Bazel from making certain aggressive RAM optimizations in some cases.")
	infoCmd.Flags().Bool("experimental_enable_skyfocus", false, "If true, enable the use of --experimental_working_set to reduce Bazel's memory footprint for incremental builds. This feature is known as Skyfocus.")
	infoCmd.Flags().Bool("experimental_extra_action_filter", false, "Deprecated in favor of aspects. Filters set of targets to schedule extra_actions for.")
	infoCmd.Flags().Bool("experimental_extra_action_top_level_only", false, "Deprecated in favor of aspects. Only schedules extra_actions for top level targets.")
	infoCmd.Flags().Bool("experimental_fsvc_threads", false, "The number of threads that are used by the FileSystemValueChecker.")
	infoCmd.Flags().Bool("experimental_local_lockfree_output", false, "When true, the local spawn runner doesn't lock the output tree during dynamic execution. Instead, spawns are allowed to execute until they are explicitly interrupted by a faster remote action.")
	infoCmd.Flags().Bool("experimental_local_retries_on_crash", false, "Number of times to retry a local action when we detect that it crashed. This exists to workaround a bug in OSXFUSE which is tickled by the use of the dynamic scheduler and --experimental_local_lockfree_output due to constant process churn. The bug can be triggered by a cancelled process that ran *before* the process we are trying to run, introducing corruption in its file reads.")
	infoCmd.Flags().Bool("experimental_materialize_param_files_directly", false, "If materializing param files, do so with direct writes to disk.")
	infoCmd.Flags().Bool("experimental_max_directories_to_eagerly_visit_in_globbing", false, "If non-negative, the first time a glob is evaluated in a package, the subdirectories of the package will be traversed in order to warm filesystem caches and compensate for lack of parallelism in globbing. At most this many directories will be visited.")
	infoCmd.Flags().Bool("experimental_merged_skyframe_analysis_execution", false, "If this flag is set, the analysis and execution phases of Skyframe are merged.")
	infoCmd.Flags().Bool("experimental_oom_sensitive_skyfunctions_semaphore_size", false, "Sets the size of the semaphore used to prevent SkyFunctions with large peak memory requirement from OOM-ing blaze. A value of 0 indicates that no semaphore should be used. Example value: \"HOST_CPUS*0.5\".")
	infoCmd.Flags().Bool("experimental_process_wrapper_graceful_sigterm", false, "When true, make the process-wrapper propagate SIGTERMs (used by the dynamic scheduler to stop process trees) to the subprocesses themselves, giving them the grace period in --local_termination_grace_seconds before forcibly sending a SIGKILL.")
	infoCmd.Flags().Bool("experimental_remote_analysis_cache", false, "The URL for the remote analysis caching backend.")
	infoCmd.Flags().Bool("experimental_remote_analysis_cache_concurrency", false, "Target concurrency for remote analysis caching RPCs.")
	infoCmd.Flags().Bool("experimental_remote_analysis_cache_deadline", false, "Deadline to use for remote analysis cache operations.")
	infoCmd.Flags().Bool("experimental_remote_analysis_cache_mode", false, "The transport direction for the remote analysis cache.")
	infoCmd.Flags().Bool("experimental_remote_cache_eviction_retries", false, "The maximum number of attempts to retry if the build encountered a transient remote cache error that would otherwise fail the build. Applies for example when artifacts are evicted from the remote cache, or in certain cache failure conditions. A non-zero value will implicitly set --incompatible_remote_use_new_exit_code_for_lost_inputs to true. A new invocation id will be generated for each attempt. If you generate invocation id and provide it to Bazel with --invocation_id, you should not use this flag. Instead, set flag --incompatible_remote_use_new_exit_code_for_lost_inputs and check for the exit code 39.")
	infoCmd.Flags().Bool("experimental_run_bep_event_include_residue", false, "Whether to include the command-line residue in run build events which could contain the residue. By default, the residue is not included in run command build events that could contain the residue.")
	infoCmd.Flags().Bool("experimental_skyfocus_dump_keys", false, "For debugging Skyfocus. Dump the focused SkyKeys (roots, leafs, focused deps, focused rdeps).")
	infoCmd.Flags().Bool("experimental_skyfocus_dump_post_gc_stats", false, "For debugging Skyfocus. If enabled, trigger manual GC before/after focusing to report heap sizes reductions. This will increase the Skyfocus latency.")
	infoCmd.Flags().Bool("experimental_skyfocus_handling_strategy", false, "Strategies for Skyfocus to handle changes outside of the working set.")
	infoCmd.Flags().Bool("experimental_skyframe_cpu_heavy_skykeys_thread_pool_size", false, "If set to a positive value (e.g. \"HOST_CPUS*1.5\"), Skyframe will run the loading/analysis phase with 2 separate thread pools: 1 with <value> threads (ideally close to HOST_CPUS) reserved for CPU-heavy SkyKeys, and 1 \"standard\" thread pool (whose size is controlled by --loading_phase_threads) for the rest.")
	infoCmd.Flags().Bool("experimental_skyframe_memory_dump", false, "Dump the memory use of individual nodes in the Skyframe graph after the build. This option takes a number of flags separated by commas: 'json' (no-op, that's the only format), 'notransient' (don't traverse transient fields), 'noconfig' (ignore objects related to configurations), 'noprecomputed' (ignore precomputed values) and 'noworkspacestatus' (ignore objects related to the workspace status machinery)")
	infoCmd.Flags().Bool("experimental_skyframe_target_pattern_evaluator", false, "Use the Skyframe-based target pattern evaluator; implies --experimental_interleave_loading_and_analysis.")
	infoCmd.Flags().Bool("experimental_skymeld_analysis_overlap_percentage", false, "The value represents the % of the analysis phase which will be overlapped with the execution phase. A value of x means Skyframe will queue up execution tasks and wait until there's x% of the top level target left to be analyzed before allowing them to launch. When the value is 0%, we'd wait for all analysis to finish before executing (no overlap). When it's 100%, the phases are free to overlap as much as they can.")
	infoCmd.Flags().Bool("experimental_split_xml_generation", false, "If this flag is set, and a test action does not generate a test.xml file, then Bazel uses a separate action to generate a dummy test.xml file containing the test log. Otherwise, Bazel generates a test.xml as part of the test action.")
	infoCmd.Flags().Bool("experimental_stats_summary", false, "Enable a modernized summary of the build stats.")
	infoCmd.Flags().Bool("experimental_stream_log_file_uploads", false, "Stream log file uploads directly to the remote storage rather than writing them to disk.")
	infoCmd.Flags().Bool("experimental_use_semaphore_for_jobs", false, "If set to true, additionally use semaphore to limit number of concurrent jobs.")
	infoCmd.Flags().Bool("experimental_use_validation_aspect", false, "Whether to run validation actions using aspect (for parallelism with tests).")
	infoCmd.Flags().Bool("experimental_working_set", false, "The working set for Skyfocus. Specify as comma-separated workspace root-relative paths. This is a stateful flag. Defining a working set persists it for subsequent invocations, until it is redefined with a new set.")
	infoCmd.Flags().Bool("explain", false, "Causes the build system to explain each executed step of the build. The explanation is written to the specified log file.")
	infoCmd.Flags().Bool("fetch", false, "Allows the command to fetch external dependencies. If set to false, the command will utilize any cached version of the dependency, and if none exists, the command will result in failure.")
	infoCmd.Flags().Bool("flaky_test_attempts", false, "Each test will be retried up to the specified number of times in case of any test failure. Tests that required more than one attempt to pass are marked as 'FLAKY' in the test summary. Normally the value specified is just an integer or the string 'default'. If an integer, then all tests will be run up to N times. If 'default', then only a single test attempt will be made for regular tests and three for tests marked explicitly as flaky by their rule (flaky=1 attribute). Alternate syntax: regex_filter@flaky_test_attempts. Where flaky_test_attempts is as above and regex_filter stands for a list of include and exclude regular expression patterns (Also see --runs_per_test). Example: --flaky_test_attempts=//foo/.*,-//foo/bar/.*@3 deflakes all tests in //foo/ except those under foo/bar three times. This option can be passed multiple times. The most recently passed argument that matches takes precedence. If nothing matches, behavior is as if 'default' above.")
	infoCmd.Flags().Bool("genrule_strategy", false, "Specify how to execute genrules. This flag will be phased out. Instead, use --spawn_strategy=<value> to control all actions or --strategy=Genrule=<value> to control genrules only.")
	infoCmd.Flags().Bool("hide_aspect_results", false, "Comma-separated list of aspect names to not display in results (see --show_result). Useful for keeping aspects added by wrappers which are typically not interesting to end users out of console output.")
	infoCmd.Flags().Bool("incompatible_config_setting_private_default_visibility", false, "If incompatible_enforce_config_setting_visibility=false, this is a noop. Else, if this flag is false, any config_setting without an explicit visibility attribute is //visibility:public. If this flag is true, config_setting follows the same visibility logic as all other rules. See https://github.com/bazelbuild/bazel/issues/12933.")
	infoCmd.Flags().Bool("incompatible_enforce_config_setting_visibility", false, "If true, enforce config_setting visibility restrictions. If false, every config_setting is visible to every target. See https://github.com/bazelbuild/bazel/issues/12932.")
	infoCmd.Flags().Bool("incompatible_remote_use_new_exit_code_for_lost_inputs", false, "If set to true, Bazel will use new exit code 39 instead of 34 if remote cacheerrors, including cache evictions, cause the build to fail.")
	infoCmd.Flags().Bool("incompatible_skip_genfiles_symlink", false, "If set to true, the genfiles symlink will not be created. For more information, see https://github.com/bazelbuild/bazel/issues/8651")
	infoCmd.Flags().BoolP("jobs", "j", false, "The number of concurrent jobs to run. Takes an integer, or a keyword (\"auto\", \"HOST_CPUS\", \"HOST_RAM\"), optionally followed by an operation ([-|*]<float>) eg. \"auto\", \"HOST_CPUS*.5\". Values must be between 1 and 5000. Values above 2500 may cause memory issues. \"auto\" calculates a reasonable default based on host resources.")
	infoCmd.Flags().BoolP("keep_going", "k", false, "Continue as much as possible after an error.  While the target that failed and those that depend on it cannot be analyzed, other prerequisites of these targets can be.")
	infoCmd.Flags().Bool("legacy_globbing_threads", false, "Number of threads to use for glob evaluation. Takes an integer, or a keyword (\"auto\", \"HOST_CPUS\", \"HOST_RAM\"), optionally followed by an operation ([-|*]<float>) eg. \"auto\", \"HOST_CPUS*.5\". \"auto\" means to use a reasonable value derived from the machine's hardware profile (e.g. the number of processors).")
	infoCmd.Flags().Bool("legacy_important_outputs", false, "Use this to suppress generation of the legacy important_outputs field in the TargetComplete event. important_outputs are required for Bazel to ResultStore/BTX integration.")
	infoCmd.Flags().Bool("loading_phase_threads", false, "Number of parallel threads to use for the loading/analysis phase.Takes an integer, or a keyword (\"auto\", \"HOST_CPUS\", \"HOST_RAM\"), optionally followed by an operation ([-|*]<float>) eg. \"auto\", \"HOST_CPUS*.5\". \"auto\" sets a reasonable default based on host resources. Must be at least 1.")
	infoCmd.Flags().Bool("local_cpu_resources", false, "Explicitly set the total number of local CPU cores available to Bazel to spend on build actions executed locally. Takes an integer, or \"HOST_CPUS\", optionally followed by [-|*]<float> (eg. HOST_CPUS*.5 to use half the available CPU cores). By default, (\"HOST_CPUS\"), Bazel will query system configuration to estimate the number of CPU cores available.")
	infoCmd.Flags().Bool("local_extra_resources", false, "Set the number of extra resources available to Bazel. Takes in a string-float pair. Can be used multiple times to specify multiple types of extra resources. Bazel will limit concurrently running actions based on the available extra resources and the extra resources required. Tests can declare the amount of extra resources they need by using a tag of the \"resources:<resoucename>:<amount>\" format. Available CPU, RAM and resources cannot be set with this flag.")
	infoCmd.Flags().Bool("local_ram_resources", false, "Explicitly set the total amount of local host RAM (in MB) available to Bazel to spend on build actions executed locally. Takes an integer, or \"HOST_RAM\", optionally followed by [-|*]<float> (eg. HOST_RAM*.5 to use half the available RAM). By default, (\"HOST_RAM*.67\"), Bazel will query system configuration to estimate the amount of RAM available and will use 67% of it.")
	infoCmd.Flags().Bool("local_resources", false, "Set the number of resources available to Bazel. Takes in an assignment to a float or HOST_RAM/HOST_CPUS, optionally followed by [-|*]<float> (eg. memory=HOST_RAM*.5 to use half the available RAM). Can be used multiple times to specify multiple types of resources. Bazel will limit concurrently running actions based on the available resources and the resources required. Tests can declare the amount of resources they need by using a tag of the \"resources:<resource name>:<amount>\" format. Overrides resources specified by --local_{cpu|ram|extra}_resources.")
	infoCmd.Flags().Bool("local_termination_grace_seconds", false, "Time to wait between terminating a local process due to timeout and forcefully shutting it down.")
	infoCmd.Flags().Bool("local_test_jobs", false, "The max number of local test jobs to run concurrently. Takes an integer, or a keyword (\"auto\", \"HOST_CPUS\", \"HOST_RAM\"), optionally followed by an operation ([-|*]<float>) eg. \"auto\", \"HOST_CPUS*.5\". 0 means local resources will limit the number of local test jobs to run concurrently instead. Setting this greater than the value for --jobs is ineffectual.")
	infoCmd.Flags().Bool("materialize_param_files", false, "Writes intermediate parameter files to output tree even when using remote action execution. Useful when debugging actions. This is implied by --subcommands and --verbose_failures.")
	infoCmd.Flags().Bool("max_config_changes_to_show", false, "When discarding the analysis cache due to a change in the build options, displays up to the given number of changed option names. If the number given is -1, all changed options will be displayed.")
	infoCmd.Flags().Bool("max_test_output_bytes", false, "Specifies maximum per-test-log size that can be emitted when --test_output is 'errors' or 'all'. Useful for avoiding overwhelming the output with excessively noisy test output. The test header is included in the log size. Negative values imply no limit. Output is all or nothing.")
	infoCmd.Flags().Bool("noallow_analysis_cache_discard", false, "If discarding the analysis cache due to a change in the build system, setting this option to false will cause bazel to exit, rather than continuing with the build. This option has no effect when 'discard_analysis_cache' is also set.")
	infoCmd.Flags().Bool("noanalyze", false, "Execute the loading/analysis phase; this is the usual behaviour. Specifying --noanalyzecauses the build to stop before starting the loading/analysis phase, just doing target pattern parsing and returning zero iff that completed successfully; this mode is useful for testing.")
	infoCmd.Flags().Bool("nobuild", false, "Execute the build; this is the usual behaviour. Specifying --nobuild causes the build to stop before executing the build actions, returning zero iff the package loading and analysis phases completed successfully; this mode is useful for testing those phases.")
	infoCmd.Flags().Bool("nobuild_manual_tests", false, "Forces test targets tagged 'manual' to be built. 'manual' tests are excluded from processing. This option forces them to be built (but not executed).")
	infoCmd.Flags().Bool("nobuild_tests_only", false, "If specified, only *_test and test_suite rules will be built and other targets specified on the command line will be ignored. By default everything that was requested will be built.")
	infoCmd.Flags().Bool("nocheck_tests_up_to_date", false, "Don't run tests, just check if they are up-to-date.  If all tests results are up-to-date, the testing completes successfully.  If any test needs to be built or executed, an error is reported and the testing fails.  This option implies --check_up_to_date behavior.")
	infoCmd.Flags().Bool("nocheck_up_to_date", false, "Don't perform the build, just check if it is up-to-date.  If all targets are up-to-date, the build completes successfully.  If any step needs to be executed an error is reported and the build fails.")
	infoCmd.Flags().Bool("nocompile_one_dependency", false, "Compile a single dependency of the argument files. This is useful for syntax checking source files in IDEs, for example, by rebuilding a single target that depends on the source file to detect errors as early as possible in the edit/build/test cycle. This argument affects the way all non-flag arguments are interpreted; instead of being targets to build they are source filenames.  For each source filename an arbitrary target that depends on it will be built.")
	infoCmd.Flags().Bool("nodiscard_analysis_cache", false, "Discard the analysis cache immediately after the analysis phase completes. Reduces memory usage by ~10%, but makes further incremental builds slower.")
	infoCmd.Flags().Bool("noenforce_project_configs", false, "If true, interactive builds may only pass the --scl_config build flag; they may not use any other build flags. --scl_config must be set to an officially suported project configuration. Supported configurations are defined in the target's PROJECT.scl, which can be found by walking up the target's packagge path. See b/324126745.")
	infoCmd.Flags().Bool("noexecution_log_sort", false, "Whether to sort the execution log, making it easier to compare logs across invocations. Set to false to avoid potentially significant CPU and memory usage at the end of the invocation, at the cost of producing the log in nondeterministic execution order. Only applies to the binary and JSON formats; the compact format is never sorted.")
	infoCmd.Flags().Bool("noexpand_test_suites", false, "Expand test_suite targets into their constituent tests before analysis. When this flag is turned on (the default), negative target patterns will apply to the tests belonging to the test suite, otherwise they will not. Turning off this flag is useful when top-level aspects are applied at command line: then they can analyze test_suite targets.")
	infoCmd.Flags().Bool("noexperimental_async_execution", false, "If set to true, Bazel is allowed to run action in a virtual thread. The number of actions in flight is still capped with --jobs.")
	infoCmd.Flags().Bool("noexperimental_bep_target_summary", false, "Whether to publish TargetSummary events.")
	infoCmd.Flags().Bool("noexperimental_build_event_expand_filesets", false, "If true, expand Filesets in the BEP when presenting output files.")
	infoCmd.Flags().Bool("noexperimental_build_event_fully_resolve_fileset_symlinks", false, "If true, fully resolve relative Fileset symlinks in the BEP when presenting output files. Requires --experimental_build_event_expand_filesets.")
	infoCmd.Flags().Bool("noexperimental_check_output_files", false, "Check for modifications made to the output files of a build. Consider setting this flag to false if you don't expect these files to change outside of bazel since it will speed up subsequent runs as they won't have to check a previous run's cache.")
	infoCmd.Flags().Bool("noexperimental_convenience_symlinks_bep_event", false, "This flag controls whether or not we will post the build eventConvenienceSymlinksIdentified to the BuildEventProtocol. If the value is true, the BuildEventProtocol will have an entry for convenienceSymlinksIdentified, listing all of the convenience symlinks created in your workspace. If false, then the convenienceSymlinksIdentified entry in the BuildEventProtocol will be empty.")
	infoCmd.Flags().Bool("noexperimental_cpu_load_scheduling", false, "Enables the experimental local execution scheduling based on CPU load, not estimation of actions one by one.  Experimental scheduling have showed the large benefit on a large local builds on a powerful machines with the large number of cores. Reccommended to use with --local_resources=cpu=HOST_CPUS")
	infoCmd.Flags().Bool("noexperimental_enable_critical_path_profiling", false, "If set (the default), critical path profiling is enabled for the execution phase. This has a slight overhead in RAM and CPU, and may prevent Bazel from making certain aggressive RAM optimizations in some cases.")
	infoCmd.Flags().Bool("noexperimental_enable_skyfocus", false, "If true, enable the use of --experimental_working_set to reduce Bazel's memory footprint for incremental builds. This feature is known as Skyfocus.")
	infoCmd.Flags().Bool("noexperimental_extra_action_top_level_only", false, "Deprecated in favor of aspects. Only schedules extra_actions for top level targets.")
	infoCmd.Flags().Bool("noexperimental_local_lockfree_output", false, "When true, the local spawn runner doesn't lock the output tree during dynamic execution. Instead, spawns are allowed to execute until they are explicitly interrupted by a faster remote action.")
	infoCmd.Flags().Bool("noexperimental_materialize_param_files_directly", false, "If materializing param files, do so with direct writes to disk.")
	infoCmd.Flags().Bool("noexperimental_merged_skyframe_analysis_execution", false, "If this flag is set, the analysis and execution phases of Skyframe are merged.")
	infoCmd.Flags().Bool("noexperimental_process_wrapper_graceful_sigterm", false, "When true, make the process-wrapper propagate SIGTERMs (used by the dynamic scheduler to stop process trees) to the subprocesses themselves, giving them the grace period in --local_termination_grace_seconds before forcibly sending a SIGKILL.")
	infoCmd.Flags().Bool("noexperimental_run_bep_event_include_residue", false, "Whether to include the command-line residue in run build events which could contain the residue. By default, the residue is not included in run command build events that could contain the residue.")
	infoCmd.Flags().Bool("noexperimental_skyfocus_dump_post_gc_stats", false, "For debugging Skyfocus. If enabled, trigger manual GC before/after focusing to report heap sizes reductions. This will increase the Skyfocus latency.")
	infoCmd.Flags().Bool("noexperimental_skyframe_target_pattern_evaluator", false, "Use the Skyframe-based target pattern evaluator; implies --experimental_interleave_loading_and_analysis.")
	infoCmd.Flags().Bool("noexperimental_split_xml_generation", false, "If this flag is set, and a test action does not generate a test.xml file, then Bazel uses a separate action to generate a dummy test.xml file containing the test log. Otherwise, Bazel generates a test.xml as part of the test action.")
	infoCmd.Flags().Bool("noexperimental_stats_summary", false, "Enable a modernized summary of the build stats.")
	infoCmd.Flags().Bool("noexperimental_stream_log_file_uploads", false, "Stream log file uploads directly to the remote storage rather than writing them to disk.")
	infoCmd.Flags().Bool("noexperimental_use_semaphore_for_jobs", false, "If set to true, additionally use semaphore to limit number of concurrent jobs.")
	infoCmd.Flags().Bool("noexperimental_use_validation_aspect", false, "Whether to run validation actions using aspect (for parallelism with tests).")
	infoCmd.Flags().Bool("nofetch", false, "Allows the command to fetch external dependencies. If set to false, the command will utilize any cached version of the dependency, and if none exists, the command will result in failure.")
	infoCmd.Flags().Bool("noincompatible_config_setting_private_default_visibility", false, "If incompatible_enforce_config_setting_visibility=false, this is a noop. Else, if this flag is false, any config_setting without an explicit visibility attribute is //visibility:public. If this flag is true, config_setting follows the same visibility logic as all other rules. See https://github.com/bazelbuild/bazel/issues/12933.")
	infoCmd.Flags().Bool("noincompatible_enforce_config_setting_visibility", false, "If true, enforce config_setting visibility restrictions. If false, every config_setting is visible to every target. See https://github.com/bazelbuild/bazel/issues/12932.")
	infoCmd.Flags().Bool("noincompatible_remote_use_new_exit_code_for_lost_inputs", false, "If set to true, Bazel will use new exit code 39 instead of 34 if remote cacheerrors, including cache evictions, cause the build to fail.")
	infoCmd.Flags().Bool("noincompatible_skip_genfiles_symlink", false, "If set to true, the genfiles symlink will not be created. For more information, see https://github.com/bazelbuild/bazel/issues/8651")
	infoCmd.Flags().Bool("nokeep_going", false, "Continue as much as possible after an error.  While the target that failed and those that depend on it cannot be analyzed, other prerequisites of these targets can be.")
	infoCmd.Flags().Bool("nolegacy_important_outputs", false, "Use this to suppress generation of the legacy important_outputs field in the TargetComplete event. important_outputs are required for Bazel to ResultStore/BTX integration.")
	infoCmd.Flags().Bool("nomaterialize_param_files", false, "Writes intermediate parameter files to output tree even when using remote action execution. Useful when debugging actions. This is implied by --subcommands and --verbose_failures.")
	infoCmd.Flags().Bool("nooutput_tree_tracking", false, "If set, tell the output service (if any) to track when files in the output tree have been modified externally (not by the build system). This should improve incremental build speed when an appropriate output service is enabled.")
	infoCmd.Flags().Bool("norewind_lost_inputs", false, "Whether to use action rewinding to recover from lost inputs.")
	infoCmd.Flags().Bool("norun_validations", false, "Whether to run validation actions as part of the build. See https://bazel.build/extending/rules#validation_actions")
	infoCmd.Flags().Bool("noshow_loading_progress", false, "If enabled, causes Bazel to print \"Loading package:\" messages.")
	infoCmd.Flags().Bool("noshow_make_env", false, "Include the \"Make\" environment in the output.")
	infoCmd.Flags().Bool("noskip_incompatible_explicit_targets", false, "Skip incompatible targets that are explicitly listed on the command line. By default, building such targets results in an error but they are silently skipped when this option is enabled. See: https://bazel.build/extending/platforms#skipping-incompatible-targets")
	infoCmd.Flags().Bool("notest_keep_going", false, "When disabled, any non-passing test will cause the entire build to stop. By default all tests are run, even if some do not pass.")
	infoCmd.Flags().Bool("nouse_action_cache", false, "Whether to use the action cache")
	infoCmd.Flags().Bool("noverbose_explanations", false, "Increases the verbosity of the explanations issued if --explain is enabled. Has no effect if --explain is not enabled.")
	infoCmd.Flags().Bool("noverbose_failures", false, "If a command fails, print out the full command line.")
	infoCmd.Flags().Bool("output_filter", false, "Only shows warnings and action outputs for rules with a name matching the provided regular expression.")
	infoCmd.Flags().Bool("output_groups", false, "A list of comma-separated output group names, each of which optionally prefixed by a + or a -. A group prefixed by + is added to the default set of output groups, while a group prefixed by - is removed from the default set. If at least one group is not prefixed, the default set of output groups is omitted. For example, --output_groups=+foo,+bar builds the union of the default set, foo, and bar, while --output_groups=foo,bar overrides the default set such that only foo and bar are built.")
	infoCmd.Flags().Bool("output_tree_tracking", false, "If set, tell the output service (if any) to track when files in the output tree have been modified externally (not by the build system). This should improve incremental build speed when an appropriate output service is enabled.")
	infoCmd.Flags().Bool("package_path", false, "A colon-separated list of where to look for packages. Elements beginning with '%workspace%' are relative to the enclosing workspace. If omitted or empty, the default is the output of 'bazel info default-package-path'.")
	infoCmd.Flags().Bool("progress_report_interval", false, "The number of seconds to wait between reports on still running jobs. The default value 0 means the first report will be printed after 10 seconds, then 30 seconds and after that progress is reported once every minute. When --curses is enabled, progress is reported every second.")
	infoCmd.Flags().Bool("rewind_lost_inputs", false, "Whether to use action rewinding to recover from lost inputs.")
	infoCmd.Flags().Bool("run_validations", false, "Whether to run validation actions as part of the build. See https://bazel.build/extending/rules#validation_actions")
	infoCmd.Flags().Bool("serialized_frontier_profile", false, "Dump a profile of serialized frontier bytes. Specifies the output path.")
	infoCmd.Flags().Bool("show_loading_progress", false, "If enabled, causes Bazel to print \"Loading package:\" messages.")
	infoCmd.Flags().Bool("show_make_env", false, "Include the \"Make\" environment in the output.")
	infoCmd.Flags().Bool("show_result", false, "Show the results of the build.  For each target, state whether or not it was brought up-to-date, and if so, a list of output files that were built.  The printed files are convenient strings for copy+pasting to the shell, to execute them.")
	infoCmd.Flags().Bool("skip_incompatible_explicit_targets", false, "Skip incompatible targets that are explicitly listed on the command line. By default, building such targets results in an error but they are silently skipped when this option is enabled. See: https://bazel.build/extending/platforms#skipping-incompatible-targets")
	infoCmd.Flags().Bool("spawn_strategy", false, "Specify how spawn actions are executed by default. Accepts a comma-separated list of strategies from highest to lowest priority. For each action Bazel picks the strategy with the highest priority that can execute the action. The default value is \"remote,worker,sandboxed,local\". See https://blog.bazel.build/2019/06/19/list-strategy.html for details.")
	infoCmd.Flags().Bool("strategy", false, "Specify how to distribute compilation of other spawn actions. Accepts a comma-separated list of strategies from highest to lowest priority. For each action Bazel picks the strategy with the highest priority that can execute the action. The default value is \"remote,worker,sandboxed,local\". This flag overrides the values set by --spawn_strategy (and --genrule_strategy if used with mnemonic Genrule). See https://blog.bazel.build/2019/06/19/list-strategy.html for details.")
	infoCmd.Flags().Bool("strategy_regexp", false, "Override which spawn strategy should be used to execute spawn actions that have descriptions matching a certain regex_filter. See --per_file_copt for details onregex_filter matching. The last regex_filter that matches the description is used. This option overrides other flags for specifying strategy. Example: --strategy_regexp=//foo.*\\.cc,-//foo/bar=local means to run actions using local strategy if their descriptions match //foo.*.cc but not //foo/bar. Example: --strategy_regexp='Compiling.*/bar=local  --strategy_regexp=Compiling=sandboxed will run 'Compiling //foo/bar/baz' with the 'local' strategy, but reversing the order would run it with 'sandboxed'. ")
	infoCmd.Flags().BoolP("subcommands", "s", false, "Display the subcommands executed during a build. Related flags: --execution_log_json_file, --execution_log_binary_file (for logging subcommands to a file in a tool-friendly format).")
	infoCmd.Flags().Bool("symlink_prefix", false, "The prefix that is prepended to any of the convenience symlinks that are created after a build. If omitted, the default value is the name of the build tool followed by a hyphen. If '/' is passed, then no symlinks are created and no warning is emitted. Warning: the special functionality for '/' will be deprecated soon; use --experimental_convenience_symlinks=ignore instead.")
	infoCmd.Flags().Bool("target_pattern_file", false, "If set, build will read patterns from the file named here, rather than on the command line. It is an error to specify a file here as well as command-line patterns.")
	infoCmd.Flags().Bool("test_keep_going", false, "When disabled, any non-passing test will cause the entire build to stop. By default all tests are run, even if some do not pass.")
	infoCmd.Flags().Bool("test_lang_filters", false, "Specifies a comma-separated list of test languages. Each language can be optionally preceded with '-' to specify excluded languages. Only those test targets will be found that are written in the specified languages. The name used for each language should be the same as the language prefix in the *_test rule, e.g. one of 'cc', 'java', 'py', etc. This option affects --build_tests_only behavior and the test command.")
	infoCmd.Flags().Bool("test_output", false, "Specifies desired output mode. Valid values are 'summary' to output only test status summary, 'errors' to also print test logs for failed tests, 'all' to print logs for all tests and 'streamed' to output logs for all tests in real time (this will force tests to be executed locally one at a time regardless of --test_strategy value).")
	infoCmd.Flags().Bool("test_size_filters", false, "Specifies a comma-separated list of test sizes. Each size can be optionally preceded with '-' to specify excluded sizes. Only those test targets will be found that contain at least one included size and do not contain any excluded sizes. This option affects --build_tests_only behavior and the test command.")
	infoCmd.Flags().Bool("test_strategy", false, "Specifies which strategy to use when running tests.")
	infoCmd.Flags().Bool("test_summary", false, "Specifies the desired format of the test summary. Valid values are 'short' to print information only about tests executed, 'terse', to print information only about unsuccessful tests that were run, 'detailed' to print detailed information about failed test cases, 'testcase' to print summary in test case resolution, do not print detailed information about failed test cases and 'none' to omit the summary.")
	infoCmd.Flags().Bool("test_tag_filters", false, "Specifies a comma-separated list of test tags. Each tag can be optionally preceded with '-' to specify excluded tags. Only those test targets will be found that contain at least one included tag and do not contain any excluded tags. This option affects --build_tests_only behavior and the test command.")
	infoCmd.Flags().Bool("test_timeout_filters", false, "Specifies a comma-separated list of test timeouts. Each timeout can be optionally preceded with '-' to specify excluded timeouts. Only those test targets will be found that contain at least one included timeout and do not contain any excluded timeouts. This option affects --build_tests_only behavior and the test command.")
	infoCmd.Flags().Bool("test_tmpdir", false, "Specifies the base temporary directory for 'bazel test' to use.")
	infoCmd.Flags().Bool("use_action_cache", false, "Whether to use the action cache")
	infoCmd.Flags().Bool("verbose_explanations", false, "Increases the verbosity of the explanations issued if --explain is enabled. Has no effect if --explain is not enabled.")
	infoCmd.Flags().Bool("verbose_failures", false, "If a command fails, print out the full command line.")
	infoCmd.Flags().Bool("version_window_for_dirty_node_gc", false, "Nodes that have been dirty for more than this many versions will be deleted from the graph upon the next update. Values must be non-negative long integers, or -1 indicating the maximum possible window.")
	rootCmd.AddCommand(infoCmd)
}
