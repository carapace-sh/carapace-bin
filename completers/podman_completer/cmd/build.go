package cmd

import (
	"github.com/carapace-sh/carapace"
	"github.com/spf13/cobra"
)

var buildCmd = &cobra.Command{
	Use:   "build [options] [CONTEXT]",
	Short: "Build an image using instructions from Containerfiles",
	Run:   func(cmd *cobra.Command, args []string) {},
}

func init() {
	carapace.Gen(buildCmd).Standalone()

	buildCmd.Flags().StringSlice("add-host", []string{}, "add a custom host-to-IP mapping (`host:ip`) (default [])")
	buildCmd.Flags().Bool("all-platforms", false, "attempt to build for all base image platforms")
	buildCmd.Flags().StringSlice("annotation", []string{}, "set metadata for an image (default [])")
	buildCmd.Flags().String("arch", "", "set the ARCH of the image to the provided value instead of the architecture of the host")
	buildCmd.Flags().String("authfile", "", "path of the authentication file.")
	buildCmd.Flags().String("blob-cache", "", "assume image blobs in the specified directory will be available for pushing")
	buildCmd.Flags().StringSlice("build-arg", []string{}, "`argument=value` to supply to the builder")
	buildCmd.Flags().StringSlice("build-arg-file", []string{}, "`argfile.conf` containing lines of argument=value to supply to the builder")
	buildCmd.Flags().StringSlice("build-context", []string{}, "`argument=value` to supply additional build context to the builder")
	buildCmd.Flags().StringSlice("cache-from", []string{}, "remote repository list to utilise as potential cache source.")
	buildCmd.Flags().StringSlice("cache-to", []string{}, "remote repository list to utilise as potential cache destination.")
	buildCmd.Flags().String("cache-ttl", "", "only consider cache images under specified duration.")
	buildCmd.Flags().StringSlice("cap-add", []string{}, "add the specified capability when running (default [])")
	buildCmd.Flags().StringSlice("cap-drop", []string{}, "drop the specified capability when running (default [])")
	buildCmd.Flags().String("cdi-config-dir", "", "`directory` of CDI configuration files")
	buildCmd.Flags().String("cert-dir", "", "use certificates at the specified path to access the registry")
	buildCmd.Flags().String("cgroup-parent", "", "optional parent cgroup for the container")
	buildCmd.Flags().String("cgroupns", "", "'private', or 'host'")
	buildCmd.Flags().String("cni-config-dir", "", "`directory` of CNI configuration files")
	buildCmd.Flags().String("cni-plugin-path", "", "`path` of CNI network plugins")
	buildCmd.Flags().Bool("compat-volumes", false, "preserve the contents of VOLUMEs during RUN instructions")
	buildCmd.Flags().Bool("compress", false, "this is a legacy option, which has no effect on the image")
	buildCmd.Flags().StringSlice("cpp-flag", []string{}, "set additional flag to pass to C preprocessor (cpp)")
	buildCmd.Flags().String("cpu-period", "", "limit the CPU CFS (Completely Fair Scheduler) period")
	buildCmd.Flags().String("cpu-quota", "", "limit the CPU CFS (Completely Fair Scheduler) quota")
	buildCmd.Flags().StringP("cpu-shares", "c", "", "CPU shares (relative weight)")
	buildCmd.Flags().String("cpuset-cpus", "", "CPUs in which to allow execution (0-3, 0,1)")
	buildCmd.Flags().String("cpuset-mems", "", "memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.")
	buildCmd.Flags().String("creds", "", "use `[username[:password]]` for accessing the registry")
	buildCmd.Flags().String("cw", "", "confidential workload `options`")
	buildCmd.Flags().StringSlice("decryption-key", []string{}, "key needed to decrypt the image")
	buildCmd.Flags().StringSlice("device", []string{}, "additional devices to provide")
	buildCmd.Flags().BoolP("disable-compression", "D", false, "don't compress layers by default")
	buildCmd.Flags().Bool("disable-content-trust", false, "this is a Docker specific option and is a NOOP")
	buildCmd.Flags().StringSlice("dns", []string{}, "set custom DNS servers or disable it completely by setting it to 'none', which prevents the automatic creation of `/etc/resolv.conf`.")
	buildCmd.Flags().StringSlice("dns-option", []string{}, "set custom DNS options")
	buildCmd.Flags().StringSlice("dns-search", []string{}, "set custom DNS search domains")
	buildCmd.Flags().StringSlice("env", []string{}, "set environment variable for the image")
	buildCmd.Flags().StringSliceP("file", "f", []string{}, "`pathname or URL` of a Dockerfile")
	buildCmd.Flags().Bool("force-rm", false, "always remove intermediate containers after a build, even if the build is unsuccessful.")
	buildCmd.Flags().String("format", "", "`format` of the built image's manifest and metadata. Use BUILDAH_FORMAT environment variable to override.")
	buildCmd.Flags().String("from", "", "image name used to replace the value in the first FROM instruction in the Containerfile")
	buildCmd.Flags().StringSlice("group-add", []string{}, "add additional groups to the primary container process. 'keep-groups' allows container processes to use supplementary groups.")
	buildCmd.Flags().StringSlice("hooks-dir", []string{}, "set the OCI hooks directory path (may be set multiple times)")
	buildCmd.Flags().Bool("http-proxy", false, "pass through HTTP Proxy environment variables")
	buildCmd.Flags().Bool("identity-label", false, "add default identity label")
	buildCmd.Flags().String("ignorefile", "", "path to an alternate .dockerignore file")
	buildCmd.Flags().String("iidfile", "", "`file` to write the image ID to")
	buildCmd.Flags().String("ipc", "", "'private', `path` of IPC namespace to join, or 'host'")
	buildCmd.Flags().String("isolation", "", "`type` of process isolation to use. Use BUILDAH_ISOLATION environment variable to override.")
	buildCmd.Flags().String("jobs", "", "how many stages to run in parallel")
	buildCmd.Flags().StringSlice("label", []string{}, "set metadata for an image (default [])")
	buildCmd.Flags().StringSlice("layer-label", []string{}, "set metadata for an intermediate image (default [])")
	buildCmd.Flags().Bool("layers", false, "use intermediate layers during build. Use BUILDAH_LAYERS environment variable to override.")
	buildCmd.Flags().Bool("load", false, "buildx --load")
	buildCmd.Flags().Bool("log-rusage", false, "log resource usage at each build step")
	buildCmd.Flags().String("logfile", "", "log to `file` instead of stdout/stderr")
	buildCmd.Flags().String("loglevel", "", "NO LONGER USED, flag ignored, and hidden")
	buildCmd.Flags().Bool("logsplit", false, "split logfile to different files for each platform")
	buildCmd.Flags().String("manifest", "", "add the image to the specified manifest list. Creates manifest list if it does not exist")
	buildCmd.Flags().StringP("memory", "m", "", "memory limit (format: <number>[<unit>], where unit = b, k, m or g)")
	buildCmd.Flags().String("memory-swap", "", "swap limit equal to memory plus swap: '-1' to enable unlimited swap")
	buildCmd.Flags().String("network", "", "'private', 'none', 'ns:path' of network namespace to join, or 'host'")
	buildCmd.Flags().Bool("no-cache", false, "do not use existing cached images for the container build. Build from the start with a new set of cached layers.")
	buildCmd.Flags().Bool("no-hostname", false, "do not create new /etc/hostname file for RUN instructions, use the one from the base image.")
	buildCmd.Flags().Bool("no-hosts", false, "do not create new /etc/hosts file for RUN instructions, use the one from the base image.")
	buildCmd.Flags().Bool("omit-history", false, "omit build history information from built image")
	buildCmd.Flags().String("os", "", "set the OS to the provided value instead of the current operating system of the host")
	buildCmd.Flags().StringSlice("os-feature", []string{}, "set required OS `feature` for the target image in addition to values from the base image")
	buildCmd.Flags().String("os-version", "", "set required OS `version` for the target image instead of the value from the base image")
	buildCmd.Flags().StringP("output", "o", "", "output destination (format: type=local,dest=path)")
	buildCmd.Flags().String("pid", "", "private, `path` of PID namespace to join, or 'host'")
	buildCmd.Flags().StringSlice("platform", []string{}, "set the `OS/ARCH[/VARIANT]` of the image to the provided value instead of the current operating system and architecture of the host (for example \"linux/arm\")")
	buildCmd.Flags().String("progress", "", "buildx --progress")
	buildCmd.Flags().String("pull", "", "Pull image policy (\"always\"|\"missing\"|\"never\"|\"newer\")")
	buildCmd.Flags().Bool("pull-always", false, "pull the image even if the named image is present in store")
	buildCmd.Flags().Bool("pull-never", false, "do not pull the image, use the image present in store if available")
	buildCmd.Flags().BoolP("quiet", "q", false, "refrain from announcing build instructions and image read/write progress")
	buildCmd.Flags().String("retry", "", "number of times to retry in case of failure when performing push/pull")
	buildCmd.Flags().String("retry-delay", "", "delay between retries in case of push/pull failures")
	buildCmd.Flags().Bool("rm", false, "remove intermediate containers after a successful build")
	buildCmd.Flags().StringSlice("runtime-flag", []string{}, "add global flags for the container runtime")
	buildCmd.Flags().String("rusage-logfile", "", "destination file to which rusage should be logged to instead of stdout (= the default).")
	buildCmd.Flags().String("sbom", "", "scan working container using `preset` configuration")
	buildCmd.Flags().String("sbom-image-output", "", "add scan results to image as `path`")
	buildCmd.Flags().String("sbom-image-purl-output", "", "add scan results to image as `path`")
	buildCmd.Flags().String("sbom-merge-strategy", "", "merge scan results using `strategy`")
	buildCmd.Flags().String("sbom-output", "", "save scan results to `file`")
	buildCmd.Flags().String("sbom-purl-output", "", "save scan results to `file``")
	buildCmd.Flags().StringSlice("sbom-scanner-command", []string{}, "scan working container using `command` in scanner image")
	buildCmd.Flags().String("sbom-scanner-image", "", "scan working container using scanner command from `image`")
	buildCmd.Flags().StringSlice("secret", []string{}, "secret file to expose to the build")
	buildCmd.Flags().StringSlice("security-opt", []string{}, "security options (default [])")
	buildCmd.Flags().String("shm-size", "", "size of '/dev/shm'. The format is `<number><unit>`.")
	buildCmd.Flags().String("sign-by", "", "sign the image using a GPG key with the specified `FINGERPRINT`")
	buildCmd.Flags().String("signature-policy", "", "`pathname` of signature policy file (not usually used)")
	buildCmd.Flags().Bool("skip-unused-stages", false, "skips stages in multi-stage builds which do not affect the final target")
	buildCmd.Flags().Bool("squash", false, "squash all image layers into a single layer")
	buildCmd.Flags().Bool("squash-all", false, "Squash all layers into a single layer")
	buildCmd.Flags().StringSlice("ssh", []string{}, "SSH agent socket or keys to expose to the build. (format: default|<id>[=<socket>|<key>[,<key>]])")
	buildCmd.Flags().Bool("stdin", false, "pass stdin into containers")
	buildCmd.Flags().StringSliceP("tag", "t", []string{}, "tagged `name` to apply to the built image")
	buildCmd.Flags().String("target", "", "set the target build stage to build")
	buildCmd.Flags().String("timestamp", "", "set created timestamp to the specified epoch seconds to allow for deterministic builds, defaults to current time")
	buildCmd.Flags().Bool("tls-verify", false, "require HTTPS and verify certificates when accessing the registry")
	buildCmd.Flags().StringSlice("ulimit", []string{}, "ulimit options")
	buildCmd.Flags().StringSlice("unsetenv", []string{}, "unset environment variable from final image")
	buildCmd.Flags().StringSlice("unsetlabel", []string{}, "unset label when inheriting labels from base image")
	buildCmd.Flags().String("userns", "", "'container', `path` of user namespace to join, or 'host'")
	buildCmd.Flags().StringSlice("userns-gid-map", []string{}, "`containerGID:hostGID:length` GID mapping to use in user namespace")
	buildCmd.Flags().String("userns-gid-map-group", "", "`name` of entries from /etc/subgid to use to set user namespace GID mapping")
	buildCmd.Flags().StringSlice("userns-uid-map", []string{}, "`containerUID:hostUID:length` UID mapping to use in user namespace")
	buildCmd.Flags().String("userns-uid-map-user", "", "`name` of entries from /etc/subuid to use to set user namespace UID mapping")
	buildCmd.Flags().String("uts", "", "private, :`path` of UTS namespace to join, or 'host'")
	buildCmd.Flags().String("variant", "", "override the `variant` of the specified image")
	buildCmd.Flags().StringSliceP("volume", "v", []string{}, "bind mount a volume into the container")
	buildCmd.Flag("blob-cache").Hidden = true
	buildCmd.Flag("cdi-config-dir").Hidden = true
	buildCmd.Flag("cni-config-dir").Hidden = true
	buildCmd.Flag("cni-plugin-path").Hidden = true
	buildCmd.Flag("load").Hidden = true
	buildCmd.Flag("log-rusage").Hidden = true
	buildCmd.Flag("loglevel").Hidden = true
	buildCmd.Flag("progress").Hidden = true
	buildCmd.Flag("pull").NoOptDefVal = " "
	buildCmd.Flag("pull-always").Hidden = true
	buildCmd.Flag("pull-never").Hidden = true
	buildCmd.Flag("rusage-logfile").Hidden = true
	buildCmd.Flag("signature-policy").Hidden = true
	rootCmd.AddCommand(buildCmd)
}
