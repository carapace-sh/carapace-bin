package cmd

import (
	"github.com/carapace-sh/carapace"
	"github.com/spf13/cobra"
)

var container_runCmd = &cobra.Command{
	Use:   "run [options] IMAGE [COMMAND [ARG...]]",
	Short: "Run a command in a new container",
	Run:   func(cmd *cobra.Command, args []string) {},
}

func init() {
	carapace.Gen(container_runCmd).Standalone()

	container_runCmd.Flags().StringSlice("add-host", []string{}, "Add a custom host-to-IP mapping (host:ip) (default [])")
	container_runCmd.Flags().StringSlice("annotation", []string{}, "Add annotations to container (key=value)")
	container_runCmd.Flags().String("arch", "", "use `ARCH` instead of the architecture of the machine for choosing images")
	container_runCmd.Flags().StringSliceP("attach", "a", []string{}, "Attach to STDIN, STDOUT or STDERR")
	container_runCmd.Flags().String("authfile", "", "Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override")
	container_runCmd.Flags().String("blkio-weight", "", "Block IO weight (relative weight) accepts a weight value between 10 and 1000.")
	container_runCmd.Flags().StringSlice("blkio-weight-device", []string{}, "Block IO weight (relative device weight, format: `DEVICE_NAME:WEIGHT`)")
	container_runCmd.Flags().StringSlice("cap-add", []string{}, "Add capabilities to the container")
	container_runCmd.Flags().StringSlice("cap-drop", []string{}, "Drop capabilities from the container")
	container_runCmd.Flags().StringSlice("cgroup-conf", []string{}, "Configure cgroup v2 (key=value)")
	container_runCmd.Flags().String("cgroup-parent", "", "Optional parent cgroup for the container")
	container_runCmd.Flags().String("cgroupns", "", "cgroup namespace to use")
	container_runCmd.Flags().String("cgroups", "", "control container cgroup configuration (\"enabled\"|\"disabled\"|\"no-conmon\"|\"split\")")
	container_runCmd.Flags().StringSlice("chrootdirs", []string{}, "Chroot directories inside the container")
	container_runCmd.Flags().String("cidfile", "", "Write the container ID to the file")
	container_runCmd.Flags().String("conmon-pidfile", "", "Path to the file that will receive the PID of conmon")
	container_runCmd.Flags().String("cpu-period", "", "Limit the CPU CFS (Completely Fair Scheduler) period")
	container_runCmd.Flags().String("cpu-quota", "", "Limit the CPU CFS (Completely Fair Scheduler) quota")
	container_runCmd.Flags().String("cpu-rt-period", "", "Limit the CPU real-time period in microseconds")
	container_runCmd.Flags().String("cpu-rt-runtime", "", "Limit the CPU real-time runtime in microseconds")
	container_runCmd.Flags().StringP("cpu-shares", "c", "", "CPU shares (relative weight)")
	container_runCmd.Flags().String("cpus", "", "Number of CPUs. The default is 0.000 which means no limit")
	container_runCmd.Flags().String("cpuset-cpus", "", "CPUs in which to allow execution (0-3, 0,1)")
	container_runCmd.Flags().String("cpuset-mems", "", "Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.")
	container_runCmd.Flags().StringSlice("decryption-key", []string{}, "Key needed to decrypt the image (e.g. /path/to/key.pem)")
	container_runCmd.Flags().BoolP("detach", "d", false, "Run container in background and print container ID")
	container_runCmd.Flags().String("detach-keys", "", "Override the key sequence for detaching a container")
	container_runCmd.Flags().StringSlice("device", []string{}, "Add a host device to the container")
	container_runCmd.Flags().StringSlice("device-cgroup-rule", []string{}, "Add a rule to the cgroup allowed devices list")
	container_runCmd.Flags().StringSlice("device-read-bps", []string{}, "Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)")
	container_runCmd.Flags().StringSlice("device-read-iops", []string{}, "Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)")
	container_runCmd.Flags().StringSlice("device-write-bps", []string{}, "Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)")
	container_runCmd.Flags().StringSlice("device-write-iops", []string{}, "Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)")
	container_runCmd.Flags().Bool("disable-content-trust", false, "This is a Docker specific option and is a NOOP")
	container_runCmd.Flags().StringSlice("dns", []string{}, "Set custom DNS servers")
	container_runCmd.Flags().StringSlice("dns-option", []string{}, "Set custom DNS options")
	container_runCmd.Flags().StringSlice("dns-search", []string{}, "Set custom DNS search domains")
	container_runCmd.Flags().String("entrypoint", "", "Overwrite the default ENTRYPOINT of the image")
	container_runCmd.Flags().StringSliceP("env", "e", []string{}, "Set environment variables in container")
	container_runCmd.Flags().StringSlice("env-file", []string{}, "Read in a file of environment variables")
	container_runCmd.Flags().Bool("env-host", false, "Use all current host environment variables in container")
	container_runCmd.Flags().StringSlice("env-merge", []string{}, "Preprocess environment variables from image before injecting them into the container")
	container_runCmd.Flags().StringSlice("expose", []string{}, "Expose a port or a range of ports")
	container_runCmd.Flags().StringSlice("gidmap", []string{}, "GID map to use for the user namespace")
	container_runCmd.Flags().StringSlice("gpus", []string{}, "GPU devices to add to the container ('all' to pass all GPUs)")
	container_runCmd.Flags().StringSlice("group-add", []string{}, "Add additional groups to the primary container process. 'keep-groups' allows container processes to use supplementary groups.")
	container_runCmd.Flags().String("group-entry", "", "Entry to write to /etc/group")
	container_runCmd.Flags().String("health-cmd", "", "set a healthcheck command for the container ('none' disables the existing healthcheck)")
	container_runCmd.Flags().String("health-interval", "", "set an interval for the healthcheck. (a value of disable results in no automatic timer setup) ")
	container_runCmd.Flags().String("health-log-destination", "", "set the destination of the HealthCheck log. Directory path, local or events_logger (local use container state file) ")
	container_runCmd.Flags().String("health-max-log-count", "", "set maximum number of attempts in the HealthCheck log file. ('0' value means an infinite number of attempts in the log file)")
	container_runCmd.Flags().String("health-max-log-size", "", "set maximum length in characters of stored HealthCheck log. ('0' value means an infinite log length)")
	container_runCmd.Flags().String("health-on-failure", "", "action to take once the container turns unhealthy")
	container_runCmd.Flags().String("health-retries", "", "the number of retries allowed before a healthcheck is considered to be unhealthy")
	container_runCmd.Flags().String("health-start-period", "", "the initialization time needed for a container to bootstrap")
	container_runCmd.Flags().String("health-startup-cmd", "", "Set a startup healthcheck command for the container")
	container_runCmd.Flags().String("health-startup-interval", "", "Set an interval for the startup healthcheck. ")
	container_runCmd.Flags().String("health-startup-retries", "", "Set the maximum number of retries before the startup healthcheck will restart the container")
	container_runCmd.Flags().String("health-startup-success", "", "Set the number of consecutive successes before the startup healthcheck is marked as successful and the normal healthcheck begins (0 indicates any success will start the regular healthcheck)")
	container_runCmd.Flags().String("health-startup-timeout", "", "Set the maximum amount of time that the startup healthcheck may take before it is considered failed")
	container_runCmd.Flags().String("health-timeout", "", "the maximum time allowed to complete the healthcheck before an interval is considered failed")
	container_runCmd.Flags().Bool("help", false, "")
	container_runCmd.Flags().StringP("hostname", "h", "", "Set container hostname")
	container_runCmd.Flags().String("hosts-file", "", "Base file to create the /etc/hosts file inside the container, or one of the special values. (\"image\"|\"none\")")
	container_runCmd.Flags().StringSlice("hostuser", []string{}, "Host user account to add to /etc/passwd within container")
	container_runCmd.Flags().Bool("http-proxy", false, "Set proxy environment variables in the container based on the host proxy vars")
	container_runCmd.Flags().String("image-volume", "", "Tells podman how to handle the builtin image volumes (\"bind\"|\"tmpfs\"|\"ignore\")")
	container_runCmd.Flags().Bool("init", false, "Run an init binary inside the container that forwards signals and reaps processes")
	container_runCmd.Flags().String("init-path", "", "Path to the container-init binary")
	container_runCmd.Flags().BoolP("interactive", "i", false, "Make STDIN available to the contained process")
	container_runCmd.Flags().String("ip", "", "Specify a static IPv4 address for the container")
	container_runCmd.Flags().String("ip6", "", "Specify a static IPv6 address for the container")
	container_runCmd.Flags().String("ipc", "", "IPC namespace to use")
	container_runCmd.Flags().String("kernel-memory", "", "DEPRECATED: Option is just hear for compatibility with Docker")
	container_runCmd.Flags().StringSliceP("label", "l", []string{}, "Set metadata on container")
	container_runCmd.Flags().StringSlice("label-file", []string{}, "Read in a line delimited file of labels")
	container_runCmd.Flags().String("log-driver", "", "Logging driver for the container")
	container_runCmd.Flags().StringSlice("log-opt", []string{}, "Logging driver options")
	container_runCmd.Flags().String("mac-address", "", "Container MAC address (e.g. 92:d0:c6:0a:29:33)")
	container_runCmd.Flags().StringP("memory", "m", "", "Memory limit (format: `<number>[<unit>]`, where unit = b (bytes), k (kibibytes), m (mebibytes), or g (gibibytes))")
	container_runCmd.Flags().String("memory-reservation", "", "Memory soft limit (format: `<number>[<unit>]`, where unit = b (bytes), k (kibibytes), m (mebibytes), or g (gibibytes))")
	container_runCmd.Flags().String("memory-swap", "", "Swap limit equal to memory plus swap: '-1' to enable unlimited swap")
	container_runCmd.Flags().String("memory-swappiness", "", "Tune container memory swappiness (0 to 100, or -1 for system default)")
	container_runCmd.Flags().StringSlice("mount", []string{}, "Attach a filesystem mount to the container")
	container_runCmd.Flags().String("name", "", "Assign a name to the container")
	container_runCmd.Flags().StringSlice("network", []string{}, "Connect a container to a network")
	container_runCmd.Flags().StringSlice("network-alias", []string{}, "Add network-scoped alias for the container")
	container_runCmd.Flags().Bool("no-healthcheck", false, "Disable healthchecks on container")
	container_runCmd.Flags().Bool("no-hostname", false, "Do not create /etc/hostname within the container, instead use the version from the image")
	container_runCmd.Flags().Bool("no-hosts", false, "Do not create /etc/hosts within the container, instead use the version from the image")
	container_runCmd.Flags().Bool("oom-kill-disable", false, "Disable OOM Killer")
	container_runCmd.Flags().String("oom-score-adj", "", "Tune the host's OOM preferences (-1000 to 1000)")
	container_runCmd.Flags().String("os", "", "use `OS` instead of the running OS for choosing images")
	container_runCmd.Flags().Bool("passwd", false, "add entries to /etc/passwd and /etc/group")
	container_runCmd.Flags().String("passwd-entry", "", "Entry to write to /etc/passwd")
	container_runCmd.Flags().String("personality", "", "Configure execution domain using personality (e.g., LINUX/LINUX32)")
	container_runCmd.Flags().String("pid", "", "PID namespace to use")
	container_runCmd.Flags().String("pidfile", "", "Write the container process ID to the file")
	container_runCmd.Flags().String("pids-limit", "", "Tune container pids limit (set -1 for unlimited)")
	container_runCmd.Flags().String("platform", "", "Specify the platform for selecting the image.  (Conflicts with --arch and --os)")
	container_runCmd.Flags().String("pod", "", "Run container in an existing pod")
	container_runCmd.Flags().String("pod-id-file", "", "Read the pod ID from the file")
	container_runCmd.Flags().StringSlice("preserve-fd", []string{}, "Pass a file descriptor into the container")
	container_runCmd.Flags().String("preserve-fds", "", "Pass a number of additional file descriptors into the container")
	container_runCmd.Flags().Bool("privileged", false, "Give extended privileges to container")
	container_runCmd.Flags().StringSliceP("publish", "p", []string{}, "Publish a container's port, or a range of ports, to the host (default [])")
	container_runCmd.Flags().BoolP("publish-all", "P", false, "Publish all exposed ports to random ports on the host interface")
	container_runCmd.Flags().String("pull", "", "Pull image policy (\"always\"|\"missing\"|\"never\"|\"newer\")")
	container_runCmd.Flags().BoolP("quiet", "q", false, "Suppress output information when pulling images")
	container_runCmd.Flags().String("rdt-class", "", "Class of Service (COS) that the container should be assigned to")
	container_runCmd.Flags().Bool("read-only", false, "Make containers root filesystem read-only")
	container_runCmd.Flags().Bool("read-only-tmpfs", false, "When running --read-only containers mount read-write tmpfs on /dev, /dev/shm, /run, /tmp and /var/tmp")
	container_runCmd.Flags().Bool("replace", false, "If a container with the same name exists, replace it")
	container_runCmd.Flags().StringSlice("requires", []string{}, "Add one or more requirement containers that must be started before this container will start")
	container_runCmd.Flags().String("restart", "", "Restart policy to apply when a container exits (\"always\"|\"no\"|\"never\"|\"on-failure\"|\"unless-stopped\")")
	container_runCmd.Flags().String("retry", "", "number of times to retry in case of failure when performing pull")
	container_runCmd.Flags().String("retry-delay", "", "delay between retries in case of pull failures")
	container_runCmd.Flags().Bool("rm", false, "Remove container and any anonymous unnamed volume associated with the container after exit")
	container_runCmd.Flags().Bool("rmi", false, "Remove image unless used by other containers, implies --rm")
	container_runCmd.Flags().Bool("rootfs", false, "The first argument is not an image but the rootfs to the exploded container")
	container_runCmd.Flags().String("sdnotify", "", "control sd-notify behavior (\"container\"|\"conmon\"|\"healthy\"|\"ignore\")")
	container_runCmd.Flags().String("seccomp-policy", "", "Policy for selecting a seccomp profile (experimental)")
	container_runCmd.Flags().StringSlice("secret", []string{}, "Add secret to container")
	container_runCmd.Flags().StringSlice("security-opt", []string{}, "Security Options")
	container_runCmd.Flags().String("shm-size", "", "Size of /dev/shm (format: `<number>[<unit>]`, where unit = b (bytes), k (kibibytes), m (mebibytes), or g (gibibytes))")
	container_runCmd.Flags().String("shm-size-systemd", "", "Size of systemd specific tmpfs mounts (/run, /run/lock) (format: `<number>[<unit>]`, where unit = b (bytes), k (kibibytes), m (mebibytes), or g (gibibytes))")
	container_runCmd.Flags().Bool("sig-proxy", false, "Proxy received signals to the process")
	container_runCmd.Flags().String("signature-policy", "", "`Pathname` of signature policy file (not usually used)")
	container_runCmd.Flags().String("stop-signal", "", "Signal to stop a container. Default is SIGTERM")
	container_runCmd.Flags().String("stop-timeout", "", "Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL.")
	container_runCmd.Flags().String("subgidname", "", "Name of range listed in /etc/subgid for use in user namespace")
	container_runCmd.Flags().String("subuidname", "", "Name of range listed in /etc/subuid for use in user namespace")
	container_runCmd.Flags().StringSlice("sysctl", []string{}, "Sysctl options")
	container_runCmd.Flags().String("systemd", "", "Run container in systemd mode (\"true\"|\"false\"|\"always\")")
	container_runCmd.Flags().String("timeout", "", "Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.")
	container_runCmd.Flags().Bool("tls-verify", false, "Require HTTPS and verify certificates when contacting registries for pulling images")
	container_runCmd.Flags().StringSlice("tmpfs", []string{}, "Mount a temporary filesystem (`tmpfs`) into a container")
	container_runCmd.Flags().BoolP("tty", "t", false, "Allocate a pseudo-TTY for container")
	container_runCmd.Flags().String("tz", "", "Set timezone in container")
	container_runCmd.Flags().StringSlice("uidmap", []string{}, "UID map to use for the user namespace")
	container_runCmd.Flags().StringSlice("ulimit", []string{}, "Ulimit options")
	container_runCmd.Flags().String("umask", "", "Set umask in container")
	container_runCmd.Flags().StringSlice("unsetenv", []string{}, "Unset environment default variables in container")
	container_runCmd.Flags().Bool("unsetenv-all", false, "Unset all default environment variables in container")
	container_runCmd.Flags().StringP("user", "u", "", "Username or UID (format: <name|uid>[:<group|gid>])")
	container_runCmd.Flags().String("userns", "", "User namespace to use")
	container_runCmd.Flags().String("uts", "", "UTS namespace to use")
	container_runCmd.Flags().String("variant", "", "Use `VARIANT` instead of the running architecture variant for choosing images")
	container_runCmd.Flags().StringSliceP("volume", "v", []string{}, "Bind mount a volume into the container")
	container_runCmd.Flags().StringSlice("volumes-from", []string{}, "Mount volumes from the specified container(s)")
	container_runCmd.Flags().StringP("workdir", "w", "", "Working directory inside the container")
	container_runCmd.Flag("kernel-memory").Hidden = true
	container_runCmd.Flag("signature-policy").Hidden = true
	containerCmd.AddCommand(container_runCmd)
}
