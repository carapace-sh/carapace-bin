# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: artisan
description: Artisan is the command line interface included with Laravel
commands:
    - name: _complete [-s|--shell SHELL] [-i|--input INPUT] [-c|--current CURRENT] [-a|--api-version API-VERSION] [-S|--symfony SYMFONY]
      description: Internal command to provide shell completion suggestions
      flags:
        --api-version=: The API version of the completion script
        --current=: The index of the "input" array that the cursor is in (e.g. COMP_CWORD)
        --input=: An array of input tokens (e.g. COMP_WORDS or argv)
        --shell=: The shell type ("bash", "fish", "zsh")
        --symfony=: deprecated
    - name: about [--only [ONLY]] [--json]
      description: Display basic information about your application
      flags:
        --json: Output the information as JSON
        --only=: The section to display
    - name: auth:clear-resets [<name>]
      description: Flush expired password reset tokens
    - name: breeze:install [--dark] [--pest] [--ssr] [--typescript] [--composer [COMPOSER]] [--] <stack>
      description: Install the Breeze controllers and resources
      flags:
        --composer=: Absolute path to the Composer binary which should be used to install packages
        --dark: Indicate that dark mode support should be installed
        --pest: Indicate that Pest should be installed
        --ssr: Indicates if Inertia SSR support should be installed
        --typescript: Indicates if TypeScript is preferred for the Inertia stack
    - name: cache:clear [--tags [TAGS]] [--] [<store>]
      description: Flush the application cache
      flags:
        --tags=: The cache tags you would like to clear
    - name: cache:forget <key> [<store>]
      description: Remove an item from the cache
    - name: cache:prune-stale-tags [<store>]
      description: Prune stale cache tags from the cache (Redis only)
    - name: cashier:webhook [--disabled] [--url [URL]] [--api-version [API-VERSION]]
      description: Create the Stripe webhook to interact with Cashier.
      flags:
        --api-version=: The Stripe API version the webhook should use
        --disabled: Immediately disable the webhook after creation
        --url=: The URL endpoint for the webhook
    - name: channel:list
      description: List all registered private broadcast channels
    - name: clear-compiled
      description: Remove the compiled class file
    - name: completion [--debug] [--] [<shell>]
      description: Dump the shell completion script
      flags:
        --debug: Tail the completion debug log
    - name: config:cache
      description: Create a cache file for faster configuration loading
    - name: config:clear
      description: Remove the configuration cache file
    - name: config:publish [--all] [--force] [--] [<name>]
      description: Publish configuration files to your application
      flags:
        --all: Publish all configuration files
        --force: Overwrite any existing configuration files
    - name: config:show <config>
      description: Display all of the values for a given configuration file or key
    - name: db [--read] [--write] [--] [<connection>]
      description: Start a new database CLI session
      flags:
        --read: Connect to the read connection
        --write: Connect to the write connection
    - name: db:monitor [--databases [DATABASES]] [--max [MAX]]
      description: Monitor the number of connections on the specified database
      flags:
        --databases=: The database connections to monitor
        --max=: The maximum number of connections that can be open before an event is dispatched
    - name: db:seed [--class [CLASS]] [--database [DATABASE]] [--force] [--] [<class>]
      description: Seed the database with records
      flags:
        --class=: The class name of the root seeder
        --database=: The database connection to seed
        --force: Force the operation to run when in production
    - name: db:show [--database [DATABASE]] [--json] [--counts] [--views] [--types]
      description: Display information about the given database
      flags:
        --counts: 'Show the table row count <bg=red;options=bold> Note: This can be slow on large databases </>'
        --database=: The database connection
        --json: Output the database information as JSON
        --types: Show the user defined types
        --views: 'Show the database views <bg=red;options=bold> Note: This can be slow on large databases </>'
    - name: db:table [--database [DATABASE]] [--json] [--] [<table>]
      description: Display information about the given database table
      flags:
        --database=: The database connection
        --json: Output the table information as JSON
    - name: db:wipe [--database [DATABASE]] [--drop-views] [--drop-types] [--force]
      description: Drop all tables, views, and types
      flags:
        --database=: The database connection to use
        --drop-types: Drop all tables and types (Postgres only)
        --drop-views: Drop all tables and views
        --force: Force the operation to run when in production
    - name: docs [<page> [<section>]]
      description: Access the Laravel documentation
    - name: down [--redirect [REDIRECT]] [--render [RENDER]] [--retry [RETRY]] [--refresh [REFRESH]] [--secret [SECRET]] [--with-secret] [--status [STATUS]]
      description: Put the application into maintenance / demo mode
      flags:
        --redirect=: The path that users should be redirected to
        --refresh=: The number of seconds after which the browser may refresh
        --render=: The view that should be prerendered for display during maintenance mode
        --retry=: The number of seconds after which the request may be retried
        --secret=: The secret phrase that may be used to bypass maintenance mode
        --status=: The status code that should be used when returning the maintenance mode response
        --with-secret: Generate a random secret phrase that may be used to bypass maintenance mode
    - name: dusk [--browse] [--without-tty]
      description: Run the Dusk tests for the application
      flags:
        --browse: Open a browser instead of using headless mode
        --without-tty: Disable output to TTY
    - name: dusk:chrome-driver [--all] [--detect] [--proxy [PROXY]] [--ssl-no-verify] [--] [<version>]
      description: Install the ChromeDriver binary
      flags:
        --all: Install a ChromeDriver binary for every OS
        --detect: Detect the installed Chrome / Chromium version
        --proxy=: 'The proxy to download the binary through (example: "tcp://127.0.0.1:9000")'
        --ssl-no-verify: Bypass SSL certificate verification when installing through a proxy
    - name: dusk:component <name>
      description: Create a new Dusk component class
    - name: dusk:fails [--browse] [--without-tty] [--pest]
      description: Run the failing Dusk tests from the last run and stop on failure
      flags:
        --browse: Open a browser instead of using headless mode
        --pest: Run the tests using Pest
        --without-tty: Disable output to TTY
    - name: dusk:install [--proxy [PROXY]] [--ssl-no-verify]
      description: Install Dusk into the application
      flags:
        --proxy=: 'The proxy to download the binary through (example: "tcp://127.0.0.1:9000")'
        --ssl-no-verify: Bypass SSL certificate verification when installing through a proxy
    - name: dusk:make <name>
      description: Create a new Dusk test class
    - name: dusk:page <name>
      description: Create a new Dusk page class
    - name: dusk:purge
      description: Purge dusk test debugging files
    - name: env
      description: Display the current framework environment
    - name: env:decrypt [--key [KEY]] [--cipher [CIPHER]] [--env [ENV]] [--force] [--path [PATH]] [--filename [FILENAME]]
      description: Decrypt an environment file
      flags:
        --cipher=: The encryption cipher
        --env=: The environment to be decrypted
        --filename=: Filename of the decrypted file
        --force: Overwrite the existing environment file
        --key=: The encryption key
        --path=: Path to write the decrypted file
    - name: env:encrypt [--key [KEY]] [--cipher [CIPHER]] [--env [ENV]] [--prune] [--force]
      description: Encrypt an environment file
      flags:
        --cipher=: The encryption cipher
        --env=: The environment to be encrypted
        --force: Overwrite the existing encrypted environment file
        --key=: The encryption key
        --prune: Delete the original environment file
    - name: event:cache
      description: Discover and cache the application's events and listeners
    - name: event:clear
      description: Clear all cached events and listeners
    - name: event:generate
      description: Generate the missing events and listeners based on registration
    - name: event:list [--event [EVENT]]
      description: List the application's events and listeners
      flags:
        --event=: Filter the events by name
    - name: fortify:install
      description: Install all of the Fortify resources
    - name: help [--format FORMAT] [--raw] [--] [<command_name>]
      description: Display help for a command
      flags:
        --format=: The output format (txt, xml, json, or md)
        --raw: To output raw command help
    - name: help [command]
      description: Help about any command
    - name: horizon [--environment [ENVIRONMENT]]
      description: Start a master supervisor in the foreground
      flags:
        --environment=: The environment name
    - name: horizon:clear [--queue [QUEUE]] [--force]
      description: Delete all of the jobs from the specified queue
      flags:
        --force: Force the operation to run when in production
        --queue=: The name of the queue to clear
    - name: horizon:clear-metrics
      description: Delete metrics for all jobs and queues
    - name: horizon:continue
      description: Instruct the master supervisor to continue processing jobs
    - name: horizon:continue-supervisor <name>
      description: Instruct the supervisor to continue processing jobs
    - name: horizon:forget [--all] [--] [<id>]
      description: Delete a failed queue job
      flags:
        --all: Delete all failed jobs
    - name: horizon:install
      description: Install all of the Horizon resources
    - name: horizon:list
      description: List all of the deployed machines
    - name: horizon:pause
      description: Pause the master supervisor
    - name: horizon:pause-supervisor <name>
      description: Pause a supervisor
    - name: horizon:publish
      description: Publish all of the Horizon resources
    - name: horizon:purge [--signal [SIGNAL]]
      description: Terminate any rogue Horizon processes
      flags:
        --signal=: The signal to send to the rogue processes
    - name: horizon:snapshot
      description: Store a snapshot of the queue metrics
    - name: horizon:status
      description: Get the current status of Horizon
    - name: horizon:supervisor [--balance [BALANCE]] [--delay [DELAY]] [--backoff [BACKOFF]] [--max-jobs [MAX-JOBS]] [--max-time [MAX-TIME]] [--force] [--max-processes [MAX-PROCESSES]] [--min-processes [MIN-PROCESSES]] [--memory [MEMORY]] [--nice [NICE]] [--paused] [--queue [QUEUE]] [--sleep [SLEEP]] [--timeout [TIMEOUT]] [--tries [TRIES]] [--auto-scaling-strategy [AUTO-SCALING-STRATEGY]] [--balance-cooldown [BALANCE-COOLDOWN]] [--balance-max-shift [BALANCE-MAX-SHIFT]] [--workers-name [WORKERS-NAME]] [--parent-id [PARENT-ID]] [--rest [REST]] [--] <name> <connection>
      description: Start a new supervisor
      flags:
        --auto-scaling-strategy=: If supervisor should scale by jobs or time to complete
        --backoff=: The number of seconds to wait before retrying a job that encountered an uncaught exception
        --balance-cooldown=: The number of seconds to wait in between auto-scaling attempts
        --balance-max-shift=: The maximum number of processes to increase or decrease per one scaling
        --balance=: The balancing strategy the supervisor should apply
        --delay=: The number of seconds to delay failed jobs (Deprecated)
        --force: Force the worker to run even in maintenance mode
        --max-jobs=: The number of jobs to process before stopping a child process
        --max-processes=: The maximum number of total workers to start
        --max-time=: The maximum number of seconds a child process should run
        --memory=: The memory limit in megabytes
        --min-processes=: The minimum number of workers to assign per queue
        --nice=: The process priority
        --parent-id=: The parent process ID
        --paused: Start the supervisor in a paused state
        --queue=: The names of the queues to work
        --rest=: Number of seconds to rest between jobs
        --sleep=: Number of seconds to sleep when no job is available
        --timeout=: The number of seconds a child process can run
        --tries=: Number of times to attempt a job before logging it failed
        --workers-name=: The name that should be assigned to the workers
    - name: horizon:supervisors
      description: List all of the supervisors
    - name: horizon:terminate [--wait]
      description: Terminate the master supervisor so it can be restarted
      flags:
        --wait: Wait for all workers to terminate
    - name: horizon:timeout [<environment>]
      description: Get the maximum timeout for the given environment
    - name: horizon:work [--name [NAME]] [--delay [DELAY]] [--backoff [BACKOFF]] [--max-jobs [MAX-JOBS]] [--max-time [MAX-TIME]] [--daemon] [--force] [--memory [MEMORY]] [--once] [--stop-when-empty] [--queue [QUEUE]] [--sleep [SLEEP]] [--rest [REST]] [--supervisor [SUPERVISOR]] [--timeout [TIMEOUT]] [--tries [TRIES]] [--] [<connection>]
      description: Start processing jobs on the queue as a daemon
      flags:
        --backoff=: The number of seconds to wait before retrying a job that encountered an uncaught exception
        --daemon: Run the worker in daemon mode (Deprecated)
        --delay=: The number of seconds to delay failed jobs (Deprecated)
        --force: Force the worker to run even in maintenance mode
        --max-jobs=: The number of jobs to process before stopping
        --max-time=: The maximum number of seconds the worker should run
        --memory=: The memory limit in megabytes
        --name=: The name of the worker
        --once: Only process the next job on the queue
        --queue=: The names of the queues to work
        --rest=: Number of seconds to rest between jobs
        --sleep=: Number of seconds to sleep when no job is available
        --stop-when-empty: Stop when the queue is empty
        --supervisor=: The name of the supervisor the worker belongs to
        --timeout=: The number of seconds a child process can run
        --tries=: Number of times to attempt a job before logging it failed
    - name: inertia:middleware [--force] [--] [<name>]
      description: Create a new Inertia middleware
      flags:
        --force: Create the class even if the Middleware already exists
    - name: inertia:start-ssr [--runtime [RUNTIME]]
      description: Start the Inertia SSR server
      flags:
        --runtime=: The runtime to use (`node` or `bun`)
    - name: inertia:stop-ssr
      description: Stop the Inertia SSR server
    - name: inspire
      description: Display an inspiring quote
    - name: install:api [--composer [COMPOSER]] [--force] [--passport] [--without-migration-prompt]
      description: Create an API routes file and install Laravel Sanctum or Laravel Passport
      flags:
        --composer=: Absolute path to the Composer binary which should be used to install packages
        --force: Overwrite any existing API routes file
        --passport: Install Laravel Passport instead of Laravel Sanctum
        --without-migration-prompt: Do not prompt to run pending migrations
    - name: install:broadcasting [--composer [COMPOSER]] [--force] [--without-reverb] [--without-node]
      description: Create a broadcasting channel routes file
      flags:
        --composer=: Absolute path to the Composer binary which should be used to install packages
        --force: Overwrite any existing broadcasting routes file
        --without-node: Do not prompt to install Node dependencies
        --without-reverb: Do not prompt to install Laravel Reverb
    - name: jetstream:install [--dark] [--teams] [--api] [--verification] [--pest] [--ssr] [--composer [COMPOSER]] [--] <stack>
      description: Install the Jetstream components and resources
      flags:
        --api: Indicates if API support should be installed
        --composer=: Absolute path to the Composer binary which should be used to install packages
        --dark: Indicate that dark mode support should be installed
        --pest: Indicates if Pest should be installed
        --ssr: Indicates if Inertia SSR support should be installed
        --teams: Indicates if team support should be installed
        --verification: Indicates if email verification support should be installed
    - name: key:generate [--show] [--force]
      description: Set the application key
      flags:
        --force: Force the operation to run when in production
        --show: Display the key instead of modifying files
    - name: lang:publish [--existing] [--force]
      description: Publish all language files that are available for customization
      flags:
        --existing: Publish and overwrite only the files that have already been published
        --force: Overwrite any existing files
    - name: list [--raw] [--format FORMAT] [--short] [--] [<namespace>]
      description: List commands
      flags:
        --format=: The output format (txt, xml, json, or md)
        --raw: To output raw command list
        --short: To skip describing commands' arguments
    - name: livewire:attribute [--force] [--] <name>
      description: Create a new Livewire attribute class
      flags:
        --force: ""
    - name: livewire:configure-s3-upload-cleanup
      description: Configure temporary file upload s3 directory to automatically cleanup files older than 24hrs
    - name: livewire:copy [--inline] [--force] [--test] [--] <name> <new-name>
      description: Copy a Livewire component
      flags:
        --force: ""
        --inline: ""
        --test: ""
    - name: livewire:cp [--inline] [--force] [--test] [--] <name> <new-name>
      description: Copy a Livewire component
      flags:
        --force: ""
        --inline: ""
        --test: ""
    - name: livewire:delete [--inline] [--force] [--test] [--] <name>
      description: Delete a Livewire component
      flags:
        --force: ""
        --inline: ""
        --test: ""
    - name: livewire:form [--force] [--] <name>
      description: Create a new Livewire form class
      flags:
        --force: ""
    - name: livewire:layout [--force] [--stub [STUB]]
      description: Create a new app layout file
      flags:
        --force: ""
        --stub=: If you have several stubs, stored in subfolders
    - name: livewire:make [--force] [--inline] [--test] [--pest] [--stub [STUB]] [--] <name>
      description: Create a new Livewire component
      flags:
        --force: ""
        --inline: ""
        --pest: ""
        --stub=: If you have several stubs, stored in subfolders
        --test: ""
    - name: livewire:move [--force] [--inline] [--] <name> <new-name>
      description: Move a Livewire component
      flags:
        --force: ""
        --inline: ""
    - name: livewire:mv [--inline] [--force] [--] <name> <new-name>
      description: Move a Livewire component
      flags:
        --force: ""
        --inline: ""
    - name: livewire:publish [--assets] [--config] [--pagination]
      description: Publish Livewire configuration
      flags:
        --assets: Indicates if Livewire's front-end assets should be published
        --config: Indicates if Livewire's config file should be published
        --pagination: Indicates if Livewire's pagination views should be published
    - name: livewire:rm [--inline] [--force] [--test] [--] <name>
      description: Delete a Livewire component
      flags:
        --force: ""
        --inline: ""
        --test: ""
    - name: livewire:stubs
      description: Publish Livewire stubs
    - name: livewire:touch [--force] [--inline] [--test] [--pest] [--stub [STUB]] [--] <name>
      description: Create a new Livewire component
      flags:
        --force: ""
        --inline: ""
        --pest: ""
        --stub=: ""
        --test: ""
    - name: livewire:upgrade [--run-only [RUN-ONLY]]
      description: Interactive upgrade helper to migrate from v2 to v3
      flags:
        --run-only=: ""
    - name: make:cache-table
      aliases:
        - cache:table
      description: Create a migration for the cache database table
    - name: make:cast [-f|--force] [--inbound] [--] <name>
      description: Create a new custom Eloquent cast class
      flags:
        --force: Create the class even if the cast already exists
        --inbound: Generate an inbound cast class
    - name: make:channel [-f|--force] [--] <name>
      description: Create a new channel class
      flags:
        --force: Create the class even if the channel already exists
    - name: make:class [-i|--invokable] [-f|--force] [--] <name>
      description: Create a new class
      flags:
        --force: Create the class even if the class already exists
        --invokable: Generate a single method, invokable class
    - name: make:command [-f|--force] [--command [COMMAND]] [--test] [--pest] [--phpunit] [--] <name>
      description: Create a new Artisan command
      flags:
        --command=: The terminal command that will be used to invoke the class
        --force: Create the class even if the console command already exists
        --pest: Generate an accompanying Pest test for the Console command
        --phpunit: Generate an accompanying PHPUnit test for the Console command
        --test: Generate an accompanying Test test for the Console command
    - name: make:component [-f|--force] [--inline] [--view] [--test] [--pest] [--phpunit] [--] <name>
      description: Create a new view component class
      flags:
        --force: Create the class even if the component already exists
        --inline: Create a component that renders an inline view
        --pest: Generate an accompanying Pest test for the Component
        --phpunit: Generate an accompanying PHPUnit test for the Component
        --test: Generate an accompanying Test test for the Component
        --view: Create an anonymous component with only a view
    - name: make:controller [--api] [--type TYPE] [--force] [-i|--invokable] [-m|--model [MODEL]] [-p|--parent [PARENT]] [-r|--resource] [-R|--requests] [-s|--singleton] [--creatable] [--test] [--pest] [--phpunit] [--] <name>
      description: Create a new controller class
      flags:
        --api: Exclude the create and edit methods from the controller
        --creatable: Indicate that a singleton resource should be creatable
        --force: Create the class even if the controller already exists
        --invokable: Generate a single method, invokable controller class
        --model=: Generate a resource controller for the given model
        --parent=: Generate a nested resource controller class
        --pest: Generate an accompanying Pest test for the Controller
        --phpunit: Generate an accompanying PHPUnit test for the Controller
        --requests: Generate FormRequest classes for store and update
        --resource: Generate a resource controller class
        --singleton: Generate a singleton resource controller class
        --test: Generate an accompanying Test test for the Controller
        --type=: Manually specify the controller stub file to use
    - name: make:enum [-s|--string] [-i|--int] [-f|--force] [--] <name>
      description: Create a new enum
      flags:
        --force: Create the enum even if the enum already exists
        --int: Generate an integer backed enum.
        --string: Generate a string backed enum.
    - name: make:event [-f|--force] [--] <name>
      description: Create a new event class
      flags:
        --force: Create the class even if the event already exists
    - name: make:exception [-f|--force] [--render] [--report] [--] <name>
      description: Create a new custom exception class
      flags:
        --force: Create the class even if the exception already exists
        --render: Create the exception with an empty render method
        --report: Create the exception with an empty report method
    - name: make:factory [-m|--model [MODEL]] [--] <name>
      description: Create a new model factory
      flags:
        --model=: The name of the model
    - name: make:interface [-f|--force] [--] <name>
      description: Create a new interface
      flags:
        --force: Create the interface even if the interface already exists
    - name: make:job [-f|--force] [--sync] [--test] [--pest] [--phpunit] [--] <name>
      description: Create a new job class
      flags:
        --force: Create the class even if the job already exists
        --pest: Generate an accompanying Pest test for the Job
        --phpunit: Generate an accompanying PHPUnit test for the Job
        --sync: Indicates that job should be synchronous
        --test: Generate an accompanying Test test for the Job
    - name: make:listener [-e|--event [EVENT]] [-f|--force] [--queued] [--test] [--pest] [--phpunit] [--] <name>
      description: Create a new event listener class
      flags:
        --event=: The event class being listened for
        --force: Create the class even if the listener already exists
        --pest: Generate an accompanying Pest test for the Listener
        --phpunit: Generate an accompanying PHPUnit test for the Listener
        --queued: Indicates the event listener should be queued
        --test: Generate an accompanying Test test for the Listener
    - name: make:livewire [--force] [--inline] [--test] [--pest] [--stub [STUB]] [--] <name>
      description: Create a new Livewire component
      flags:
        --force: ""
        --inline: ""
        --pest: ""
        --stub=: ""
        --test: ""
    - name: make:mail [-f|--force] [-m|--markdown [MARKDOWN]] [--view [VIEW]] [--test] [--pest] [--phpunit] [--] <name>
      description: Create a new email class
      flags:
        --force: Create the class even if the mailable already exists
        --markdown=: Create a new Markdown template for the mailable
        --pest: Generate an accompanying Pest test for the Mailable
        --phpunit: Generate an accompanying PHPUnit test for the Mailable
        --test: Generate an accompanying Test test for the Mailable
        --view=: Create a new Blade template for the mailable
    - name: make:middleware [--test] [--pest] [--phpunit] [--] <name>
      description: Create a new middleware class
      flags:
        --pest: Generate an accompanying Pest test for the Middleware
        --phpunit: Generate an accompanying PHPUnit test for the Middleware
        --test: Generate an accompanying Test test for the Middleware
    - name: make:migration [--create [CREATE]] [--table [TABLE]] [--path [PATH]] [--realpath] [--fullpath] [--] <name>
      description: Create a new migration file
      flags:
        --create=: The table to be created
        --fullpath: Output the full path of the migration (Deprecated)
        --path=: The location where the migration file should be created
        --realpath: Indicate any provided migration file paths are pre-resolved absolute paths
        --table=: The table to migrate
    - name: make:model [-a|--all] [-c|--controller] [-f|--factory] [--force] [-m|--migration] [--morph-pivot] [--policy] [-s|--seed] [-p|--pivot] [-r|--resource] [--api] [-R|--requests] [--test] [--pest] [--phpunit] [--] <name>
      description: Create a new Eloquent model class
      flags:
        --all: Generate a migration, seeder, factory, policy, resource controller, and form request classes for the model
        --api: Indicates if the generated controller should be an API resource controller
        --controller: Create a new controller for the model
        --factory: Create a new factory for the model
        --force: Create the class even if the model already exists
        --migration: Create a new migration file for the model
        --morph-pivot: Indicates if the generated model should be a custom polymorphic intermediate table model
        --pest: Generate an accompanying Pest test for the Model
        --phpunit: Generate an accompanying PHPUnit test for the Model
        --pivot: Indicates if the generated model should be a custom intermediate table model
        --policy: Create a new policy for the model
        --requests: Create new form request classes and use them in the resource controller
        --resource: Indicates if the generated controller should be a resource controller
        --seed: Create a new seeder for the model
        --test: Generate an accompanying Test test for the Model
    - name: make:notification [-f|--force] [-m|--markdown [MARKDOWN]] [--test] [--pest] [--phpunit] [--] <name>
      description: Create a new notification class
      flags:
        --force: Create the class even if the notification already exists
        --markdown=: Create a new Markdown template for the notification
        --pest: Generate an accompanying Pest test for the Notification
        --phpunit: Generate an accompanying PHPUnit test for the Notification
        --test: Generate an accompanying Test test for the Notification
    - name: make:notifications-table
      aliases:
        - notifications:table
      description: Create a migration for the notifications table
    - name: make:observer [-f|--force] [-m|--model [MODEL]] [--] <name>
      description: Create a new observer class
      flags:
        --force: Create the class even if the observer already exists
        --model=: The model that the observer applies to
    - name: make:policy [-f|--force] [-m|--model [MODEL]] [-g|--guard [GUARD]] [--] <name>
      description: Create a new policy class
      flags:
        --force: Create the class even if the policy already exists
        --guard=: The guard that the policy relies on
        --model=: The model that the policy applies to
    - name: make:provider [-f|--force] [--] <name>
      description: Create a new service provider class
      flags:
        --force: Create the class even if the provider already exists
    - name: make:queue-batches-table
      aliases:
        - queue:batches-table
      description: Create a migration for the batches database table
    - name: make:queue-failed-table
      aliases:
        - queue:failed-table
      description: Create a migration for the failed queue jobs database table
    - name: make:queue-table
      aliases:
        - queue:table
      description: Create a migration for the queue jobs database table
    - name: make:request [-f|--force] [--] <name>
      description: Create a new form request class
      flags:
        --force: Create the class even if the request already exists
    - name: make:resource [-f|--force] [-c|--collection] [--] <name>
      description: Create a new resource
      flags:
        --collection: Create a resource collection
        --force: Create the class even if the resource already exists
    - name: make:rule [-f|--force] [-i|--implicit] [--] <name>
      description: Create a new validation rule
      flags:
        --force: Create the class even if the rule already exists
        --implicit: Generate an implicit rule
    - name: make:scope [-f|--force] [--] <name>
      description: Create a new scope class
      flags:
        --force: Create the class even if the scope already exists
    - name: make:seeder <name>
      description: Create a new seeder class
    - name: make:session-table
      aliases:
        - session:table
      description: Create a migration for the session database table
    - name: make:test [-f|--force] [-u|--unit] [--pest] [--phpunit] [--] <name>
      description: Create a new test class
      flags:
        --force: Create the test even if the test already exists
        --pest: Create a Pest test
        --phpunit: Create a PHPUnit test
        --unit: Create a unit test
    - name: make:trait [-f|--force] [--] <name>
      description: Create a new trait
      flags:
        --force: Create the trait even if the trait already exists
    - name: make:view [--extension [EXTENSION]] [-f|--force] [--test] [--pest] [--phpunit] [--] <name>
      description: Create a new view
      flags:
        --extension=: The extension of the generated view
        --force: Create the view even if the view already exists
        --pest: Generate an accompanying Pest test for the View
        --phpunit: Generate an accompanying PHPUnit test for the View
        --test: Generate an accompanying Test test for the View
    - name: migrate [--database [DATABASE]] [--force] [--path [PATH]] [--realpath] [--schema-path [SCHEMA-PATH]] [--pretend] [--seed] [--seeder [SEEDER]] [--step] [--graceful] [--isolated [ISOLATED]]
      description: Run the database migrations
      flags:
        --database=: The database connection to use
        --force: Force the operation to run when in production
        --graceful: Return a successful exit code even if an error occurs
        --isolated=: Do not run the command if another instance of the command is already running
        --path=: The path(s) to the migrations files to be executed
        --pretend: Dump the SQL queries that would be run
        --realpath: Indicate any provided migration file paths are pre-resolved absolute paths
        --schema-path=: The path to a schema dump file
        --seed: Indicates if the seed task should be re-run
        --seeder=: The class name of the root seeder
        --step: Force the migrations to be run so they can be rolled back individually
    - name: migrate:fresh [--database [DATABASE]] [--drop-views] [--drop-types] [--force] [--path [PATH]] [--realpath] [--schema-path [SCHEMA-PATH]] [--seed] [--seeder [SEEDER]] [--step]
      description: Drop all tables and re-run all migrations
      flags:
        --database=: The database connection to use
        --drop-types: Drop all tables and types (Postgres only)
        --drop-views: Drop all tables and views
        --force: Force the operation to run when in production
        --path=: The path(s) to the migrations files to be executed
        --realpath: Indicate any provided migration file paths are pre-resolved absolute paths
        --schema-path=: The path to a schema dump file
        --seed: Indicates if the seed task should be re-run
        --seeder=: The class name of the root seeder
        --step: Force the migrations to be run so they can be rolled back individually
    - name: migrate:install [--database [DATABASE]]
      description: Create the migration repository
      flags:
        --database=: The database connection to use
    - name: migrate:refresh [--database [DATABASE]] [--force] [--path [PATH]] [--realpath] [--seed] [--seeder [SEEDER]] [--step [STEP]]
      description: Reset and re-run all migrations
      flags:
        --database=: The database connection to use
        --force: Force the operation to run when in production
        --path=: The path(s) to the migrations files to be executed
        --realpath: Indicate any provided migration file paths are pre-resolved absolute paths
        --seed: Indicates if the seed task should be re-run
        --seeder=: The class name of the root seeder
        --step=: The number of migrations to be reverted & re-run
    - name: migrate:reset [--database [DATABASE]] [--force] [--path [PATH]] [--realpath] [--pretend]
      description: Rollback all database migrations
      flags:
        --database=: The database connection to use
        --force: Force the operation to run when in production
        --path=: The path(s) to the migrations files to be executed
        --pretend: Dump the SQL queries that would be run
        --realpath: Indicate any provided migration file paths are pre-resolved absolute paths
    - name: migrate:rollback [--database [DATABASE]] [--force] [--path [PATH]] [--realpath] [--pretend] [--step [STEP]] [--batch BATCH]
      description: Rollback the last database migration
      flags:
        --batch=: The batch of migrations (identified by their batch number) to be reverted
        --database=: The database connection to use
        --force: Force the operation to run when in production
        --path=: The path(s) to the migrations files to be executed
        --pretend: Dump the SQL queries that would be run
        --realpath: Indicate any provided migration file paths are pre-resolved absolute paths
        --step=: The number of migrations to be reverted
    - name: migrate:status [--database [DATABASE]] [--pending [PENDING]] [--path [PATH]] [--realpath]
      description: Show the status of each migration
      flags:
        --database=: The database connection to use
        --path=: The path(s) to the migrations files to use
        --pending=: Only list pending migrations
        --realpath: Indicate any provided migration file paths are pre-resolved absolute paths
    - name: model:prune [--model [MODEL]] [--except [EXCEPT]] [--path [PATH]] [--chunk [CHUNK]] [--pretend]
      description: Prune models that are no longer needed
      flags:
        --chunk=: The number of models to retrieve per chunk of models to be deleted
        --except=: Class names of the models to be excluded from pruning
        --model=: Class names of the models to be pruned
        --path=: Absolute path(s) to directories where models are located
        --pretend: Display the number of prunable records found instead of deleting them
    - name: model:show [--database [DATABASE]] [--json] [--] <model>
      description: Show information about an Eloquent model
      flags:
        --database=: The database connection to use
        --json: Output the model as JSON
    - name: nova:action [--destructive] [--queued] [--] <name>
      description: Create a new action class
      flags:
        --destructive: Indicate that the action deletes / destroys resources
        --queued: Indicates the action should be queued
    - name: nova:asset <name>
      description: Create a new asset
    - name: nova:base-resource <name>
      description: Create a new base resource class
    - name: nova:card <name>
      description: Create a new card
    - name: nova:check-license
      description: Verify your Nova license key
    - name: nova:custom-filter <name>
      description: Create a new custom filter
    - name: nova:dashboard <name>
      description: Create a new dashboard.
    - name: nova:field <name>
      description: Create a new field
    - name: nova:filter [--boolean] [--date] [--] <name>
      description: Create a new filter class
      flags:
        --boolean: Indicates if the generated filter should be a boolean filter
        --date: Indicates if the generated filter should be a date filter
    - name: nova:install
      description: Install all of the Nova resources
    - name: nova:lens <name>
      description: Create a new lens class
    - name: nova:partition <name>
      description: Create a new metric (partition) class
    - name: nova:progress <name>
      description: Create a new metric (progress) class
    - name: nova:publish [--force]
      description: Publish all of the Nova resources
      flags:
        --force: Overwrite any existing files
    - name: nova:repeatable [-m|--model MODEL] [--] <name>
      description: Create a new repeatable class
      flags:
        --model=: The model class being represented.
    - name: nova:resource [-m|--model MODEL] [--] <name>
      description: Create a new resource class
      flags:
        --model=: The model class being represented.
    - name: nova:resource-tool <name>
      description: Create a new resource tool
    - name: nova:stubs [--force]
      description: Publish all stubs that are available for customization
      flags:
        --force: Overwrite any existing files
    - name: nova:table <name>
      description: Create a new metric (table) class
    - name: nova:tool <name>
      description: Create a new tool
    - name: nova:translate [--force] [--] <language>
      description: Create translation files for Nova
      flags:
        --force: Overwrite any existing files
    - name: nova:trend <name>
      description: Create a new metric (trend) class
    - name: nova:upgrade
      description: Upgrade Laravel Nova 3 to 4
    - name: nova:user
      description: Create a new user
    - name: nova:value <name>
      description: Create a new metric (single value) class
    - name: octane:frankenphp [--host [HOST]] [--port [PORT]] [--admin-host [ADMIN-HOST]] [--admin-port [ADMIN-PORT]] [--workers [WORKERS]] [--max-requests [MAX-REQUESTS]] [--caddyfile [CADDYFILE]] [--https] [--http-redirect] [--watch] [--poll] [--log-level [LOG-LEVEL]]
      description: Start the Octane FrankenPHP server
      flags:
        --admin-host=: The host the admin server should be available on
        --admin-port=: The port the admin server should be available on
        --caddyfile=: The path to the FrankenPHP Caddyfile file
        --host=: The IP address the server should bind to
        --http-redirect: Enable HTTP to HTTPS redirection (only enabled if --https is passed)
        --https: Enable HTTPS, HTTP/2, and HTTP/3, and automatically generate and renew certificates
        --log-level=: Log messages at or above the specified log level
        --max-requests=: The number of requests to process before reloading the server
        --poll: Use file system polling while watching in order to watch files over a network
        --port=: The port the server should be available on
        --watch: Automatically reload the server when the application is modified
        --workers=: The number of workers that should be available to handle requests
    - name: octane:install [--server [SERVER]]
      description: Install the Octane components and resources
      flags:
        --server=: The server that should be used to serve the application
    - name: octane:reload [--server [SERVER]]
      description: Reload the Octane workers
      flags:
        --server=: The server that is running the application
    - name: octane:roadrunner [--host [HOST]] [--port [PORT]] [--rpc-host [RPC-HOST]] [--rpc-port [RPC-PORT]] [--workers [WORKERS]] [--max-requests [MAX-REQUESTS]] [--rr-config [RR-CONFIG]] [--watch] [--poll] [--log-level [LOG-LEVEL]]
      description: Start the Octane RoadRunner server
      flags:
        --host=: The IP address the server should bind to
        --log-level=: Log messages at or above the specified log level
        --max-requests=: The number of requests to process before reloading the server
        --poll: Use file system polling while watching in order to watch files over a network
        --port=: The port the server should be available on
        --rpc-host=: The RPC IP address the server should bind to
        --rpc-port=: The RPC port the server should be available on
        --rr-config=: The path to the RoadRunner .rr.yaml file
        --watch: Automatically reload the server when the application is modified
        --workers=: The number of workers that should be available to handle requests
    - name: octane:start [--server [SERVER]] [--host [HOST]] [--port [PORT]] [--admin-port [ADMIN-PORT]] [--rpc-host [RPC-HOST]] [--rpc-port [RPC-PORT]] [--workers [WORKERS]] [--task-workers [TASK-WORKERS]] [--max-requests [MAX-REQUESTS]] [--rr-config [RR-CONFIG]] [--caddyfile [CADDYFILE]] [--https] [--http-redirect] [--watch] [--poll] [--log-level [LOG-LEVEL]]
      description: Start the Octane server
      flags:
        --admin-port=: The port the admin server should be available on [FrankenPHP only]
        --caddyfile=: The path to the FrankenPHP Caddyfile file
        --host=: The IP address the server should bind to
        --http-redirect: Enable HTTP to HTTPS redirection (only enabled if --https is passed) [FrankenPHP only]
        --https: Enable HTTPS, HTTP/2, and HTTP/3, and automatically generate and renew certificates [FrankenPHP only]
        --log-level=: Log messages at or above the specified log level
        --max-requests=: The number of requests to process before reloading the server
        --poll: Use file system polling while watching in order to watch files over a network
        --port=: 'The port the server should be available on [default: "8000"]'
        --rpc-host=: The RPC IP address the server should bind to
        --rpc-port=: The RPC port the server should be available on
        --rr-config=: The path to the RoadRunner .rr.yaml file
        --server=: The server that should be used to serve the application
        --task-workers=: The number of task workers that should be available to handle tasks
        --watch: Automatically reload the server when the application is modified
        --workers=: The number of workers that should be available to handle requests
    - name: octane:status [--server [SERVER]]
      description: Get the current status of the Octane server
      flags:
        --server=: The server that is running the application
    - name: octane:stop [--server [SERVER]]
      description: Stop the Octane server
      flags:
        --server=: The server that is running the application
    - name: octane:swoole [--host [HOST]] [--port [PORT]] [--workers [WORKERS]] [--task-workers [TASK-WORKERS]] [--max-requests [MAX-REQUESTS]] [--watch] [--poll]
      description: Start the Octane Swoole server
      flags:
        --host=: The IP address the server should bind to
        --max-requests=: The number of requests to process before reloading the server
        --poll: Use file system polling while watching in order to watch files over a network
        --port=: The port the server should be available on
        --task-workers=: The number of task workers that should be available to handle tasks
        --watch: Automatically reload the server when the application is modified
        --workers=: The number of workers that should be available to handle requests
    - name: optimize
      description: Cache framework bootstrap, configuration, and metadata to increase performance
    - name: optimize:clear
      description: Remove the cached bootstrap files
    - name: package:discover
      description: Rebuild the cached package manifest
    - name: passport:client [--personal] [--password] [--client] [--name [NAME]] [--provider [PROVIDER]] [--redirect_uri [REDIRECT_URI]] [--user_id [USER_ID]] [--public]
      description: Create a client for issuing access tokens
      flags:
        --client: Create a client credentials grant client
        --name=: The name of the client
        --password: Create a password grant client
        --personal: Create a personal access token client
        --provider=: The name of the user provider
        --public: Create a public client (Auth code grant type only)
        --redirect_uri=: The URI to redirect to after authorization
        --user_id=: The user ID the client should be assigned to
    - name: passport:hash [--force]
      description: Hash all of the existing secrets in the clients table
      flags:
        --force: Force the operation to run without confirmation prompt
    - name: passport:install [--uuids] [--force] [--length [LENGTH]]
      description: Run the commands necessary to prepare Passport for use
      flags:
        --force: Overwrite keys they already exist
        --length=: The length of the private key
        --uuids: Use UUIDs for all client IDs
    - name: passport:keys [--force] [--length [LENGTH]]
      description: Create the encryption keys for API authentication
      flags:
        --force: Overwrite keys they already exist
        --length=: The length of the private key
    - name: passport:purge [--revoked] [--expired] [--hours [HOURS]]
      description: Purge revoked and / or expired tokens and authentication codes
      flags:
        --expired: Only purge expired tokens and authentication codes
        --hours=: The number of hours to retain expired tokens
        --revoked: Only purge revoked tokens and authentication codes
    - name: pennant:feature [-f|--force] [--] <name>
      description: Create a new feature class
      flags:
        --force: Create the class even if the feature already exists
    - name: pennant:purge [--except [EXCEPT]] [--except-registered] [--store [STORE]] [--] [<features>...]
      aliases:
        - pennant:clear
      description: Delete Pennant features from storage
      flags:
        --except-registered: Purge all features except those registered
        --except=: The features that should be excluded from purging
        --store=: The store to purge the features from
    - name: pulse:check [--once]
      description: Take a snapshot of the current server's pulse
      flags:
        --once: Take a single snapshot
    - name: pulse:clear [--type [TYPE]] [--force]
      aliases:
        - pulse:purge
      description: Delete all Pulse data from storage
      flags:
        --force: Force the operation to run when in production
        --type=: Only clear the specified type(s)
    - name: pulse:restart
      description: Restart any running "work" and "check" commands
    - name: pulse:work [--stop-when-empty]
      description: Process incoming Pulse data from the ingest stream
      flags:
        --stop-when-empty: Stop when the stream is empty
    - name: queue:clear [--queue [QUEUE]] [--force] [--] [<connection>]
      description: Delete all of the jobs from the specified queue
      flags:
        --force: Force the operation to run when in production
        --queue=: The name of the queue to clear
    - name: queue:failed
      description: List all of the failed queue jobs
    - name: queue:flush [--hours [HOURS]]
      description: Flush all of the failed queue jobs
      flags:
        --hours=: The number of hours to retain failed job data
    - name: queue:forget <id>
      description: Delete a failed queue job
    - name: queue:listen [--name [NAME]] [--delay [DELAY]] [--backoff [BACKOFF]] [--force] [--memory [MEMORY]] [--queue [QUEUE]] [--sleep [SLEEP]] [--rest [REST]] [--timeout [TIMEOUT]] [--tries [TRIES]] [--] [<connection>]
      description: Listen to a given queue
      flags:
        --backoff=: The number of seconds to wait before retrying a job that encountered an uncaught exception
        --delay=: The number of seconds to delay failed jobs (Deprecated)
        --force: Force the worker to run even in maintenance mode
        --memory=: The memory limit in megabytes
        --name=: The name of the worker
        --queue=: The queue to listen on
        --rest=: Number of seconds to rest between jobs
        --sleep=: Number of seconds to sleep when no job is available
        --timeout=: The number of seconds a child process can run
        --tries=: Number of times to attempt a job before logging it failed
    - name: queue:monitor [--max [MAX]] [--] <queues>
      description: Monitor the size of the specified queues
      flags:
        --max=: The maximum number of jobs that can be on the queue before an event is dispatched
    - name: queue:prune-batches [--hours [HOURS]] [--unfinished [UNFINISHED]] [--cancelled [CANCELLED]]
      description: Prune stale entries from the batches database
      flags:
        --cancelled=: The number of hours to retain cancelled batch data
        --hours=: The number of hours to retain batch data
        --unfinished=: The number of hours to retain unfinished batch data
    - name: queue:prune-failed [--hours [HOURS]]
      description: Prune stale entries from the failed jobs table
      flags:
        --hours=: The number of hours to retain failed jobs data
    - name: queue:restart
      description: Restart queue worker daemons after their current job
    - name: queue:retry [--queue [QUEUE]] [--range [RANGE]] [--] [<id>...]
      description: Retry a failed queue job
      flags:
        --queue=: Retry all of the failed jobs for the specified queue
        --range=: Range of job IDs (numeric) to be retried (e.g. 1-5)
    - name: queue:retry-batch [--isolated [ISOLATED]] [--] <id>
      description: Retry the failed jobs for a batch
      flags:
        --isolated=: Do not run the command if another instance of the command is already running
    - name: queue:work [--name [NAME]] [--queue [QUEUE]] [--daemon] [--once] [--stop-when-empty] [--delay [DELAY]] [--backoff [BACKOFF]] [--max-jobs [MAX-JOBS]] [--max-time [MAX-TIME]] [--force] [--memory [MEMORY]] [--sleep [SLEEP]] [--rest [REST]] [--timeout [TIMEOUT]] [--tries [TRIES]] [--] [<connection>]
      description: Start processing jobs on the queue as a daemon
      flags:
        --backoff=: The number of seconds to wait before retrying a job that encountered an uncaught exception
        --daemon: Run the worker in daemon mode (Deprecated)
        --delay=: The number of seconds to delay failed jobs (Deprecated)
        --force: Force the worker to run even in maintenance mode
        --max-jobs=: The number of jobs to process before stopping
        --max-time=: The maximum number of seconds the worker should run
        --memory=: The memory limit in megabytes
        --name=: The name of the worker
        --once: Only process the next job on the queue
        --queue=: The names of the queues to work
        --rest=: Number of seconds to rest between jobs
        --sleep=: Number of seconds to sleep when no job is available
        --stop-when-empty: Stop when the queue is empty
        --timeout=: The number of seconds a child process can run
        --tries=: Number of times to attempt a job before logging it failed
    - name: reverb:install
      description: Install the Reverb dependencies
    - name: reverb:restart
      description: Restart the Reverb server
    - name: reverb:start [--host [HOST]] [--port [PORT]] [--hostname [HOSTNAME]] [--debug]
      description: Start the Reverb server
      flags:
        --debug: Indicates whether debug messages should be displayed in the terminal
        --host=: The IP address the server should bind to
        --hostname=: The hostname the server is accessible from
        --port=: The port the server should listen on
    - name: route:cache
      description: Create a route cache file for faster route registration
    - name: route:clear
      description: Remove the route cache file
    - name: route:list [--json] [--method [METHOD]] [--name [NAME]] [--domain [DOMAIN]] [--path [PATH]] [--except-path [EXCEPT-PATH]] [-r|--reverse] [--sort [SORT]] [--except-vendor] [--only-vendor]
      description: List all registered routes
      flags:
        --domain=: Filter the routes by domain
        --except-path=: Do not display the routes matching the given path pattern
        --except-vendor: Do not display routes defined by vendor packages
        --json: Output the route list as JSON
        --method=: Filter the routes by method
        --name=: Filter the routes by name
        --only-vendor: Only display routes defined by vendor packages
        --path=: Only show routes matching the given path pattern
        --reverse: Reverse the ordering of the routes
        --sort=: The column (domain, method, uri, name, action, middleware) to sort by
    - name: sail:add [<services>]
      description: Add a service to an existing Sail installation
    - name: sail:install [--with [WITH]] [--devcontainer]
      description: Install Laravel Sail's default Docker Compose file
      flags:
        --devcontainer: Create a .devcontainer configuration directory
        --with=: The services that should be included in the installation
    - name: sail:publish
      description: Publish the Laravel Sail Docker files
    - name: sanctum:prune-expired [--hours [HOURS]]
      description: Prune tokens expired for more than specified number of hours
      flags:
        --hours=: The number of hours to retain expired Sanctum tokens
    - name: schedule:clear-cache
      description: Delete the cached mutex files created by scheduler
    - name: schedule:finish <id> [<code>]
      description: Handle the completion of a scheduled command
    - name: schedule:interrupt
      description: Interrupt the current schedule run
    - name: schedule:list [--timezone [TIMEZONE]] [--next]
      description: List all scheduled tasks
      flags:
        --next: Sort the listed tasks by their next due date
        --timezone=: The timezone that times should be displayed in
    - name: schedule:run
      description: Run the scheduled commands
    - name: schedule:test [--name [NAME]]
      description: Run a scheduled command
      flags:
        --name=: The name of the scheduled command to run
    - name: schedule:work [--run-output-file [RUN-OUTPUT-FILE]]
      description: Start the schedule worker
      flags:
        --run-output-file=: The file to direct <info>schedule:run</info> output to
    - name: schema:dump [--database [DATABASE]] [--path [PATH]] [--prune]
      description: Dump the given database schema
      flags:
        --database=: The database connection to use
        --path=: The path where the schema dump file should be stored
        --prune: Delete all existing migration files
    - name: scout:delete-all-indexes
      description: Delete all indexes
    - name: scout:delete-index <name>
      description: Delete an index
    - name: scout:flush <model>
      description: Flush all of the model's records from the index
    - name: scout:import [-c|--chunk [CHUNK]] [--] <model>
      description: Import the given model into the search index
      flags:
        --chunk=: 'The number of records to import at a time (Defaults to configuration value: `scout.chunk.searchable`)'
    - name: scout:index [-k|--key [KEY]] [--] <name>
      description: Create an index
      flags:
        --key=: The name of the primary key
    - name: scout:sync-index-settings
      description: Sync your configured index settings with your search engine (Meilisearch)
    - name: serve [--host [HOST]] [--port [PORT]] [--tries [TRIES]] [--no-reload]
      description: Serve the application on the PHP development server
      flags:
        --host=: The host address to serve the application on
        --no-reload: Do not reload the development server on .env file changes
        --port=: The port to serve the application on
        --tries=: The max number of ports to attempt to serve from
    - name: spark:install
      description: Install all of the Spark resources
    - name: storage:link [--relative] [--force]
      description: Create the symbolic links configured for the application
      flags:
        --force: Recreate existing symbolic links
        --relative: Create the symbolic link using relative paths
    - name: storage:unlink
      description: Delete existing symbolic links configured for the application
    - name: stub:publish [--existing] [--force]
      description: Publish all stubs that are available for customization
      flags:
        --existing: Publish and overwrite only the files that have already been published
        --force: Overwrite any existing files
    - name: telescope:clear
      description: Delete all Telescope data from storage
    - name: telescope:install
      description: Install all of the Telescope resources
    - name: telescope:pause
      description: Pause all Telescope watchers
    - name: telescope:prune [--hours [HOURS]] [--keep-exceptions]
      description: Prune stale entries from the Telescope database
      flags:
        --hours=: The number of hours to retain Telescope data
        --keep-exceptions: Retain exception data
    - name: telescope:publish [--force]
      description: Publish all of the Telescope resources
      flags:
        --force: Overwrite any existing files
    - name: telescope:resume
      description: Unpause all Telescope watchers
    - name: test [--without-tty] [--compact] [--coverage] [--min [MIN]] [-p|--parallel] [--profile] [--recreate-databases] [--drop-databases] [--without-databases]
      description: Run the application tests
      flags:
        --compact: Indicates whether the compact printer should be used
        --coverage: Indicates whether code coverage information should be collected
        --drop-databases: Indicates if the test databases should be dropped
        --min=: Indicates the minimum threshold enforcement for code coverage
        --parallel: Indicates if the tests should run in parallel
        --profile: Lists top 10 slowest tests
        --recreate-databases: Indicates if the test databases should be re-created
        --without-databases: Indicates if database configuration should be performed
        --without-tty: Disable output to TTY
    - name: tinker [--execute [EXECUTE]] [--] [<include>...]
      description: Interact with your application
      flags:
        --execute=: Execute the given code using Tinker
    - name: ui [--auth] [--option [OPTION]] [--] <type>
      description: Swap the front-end scaffolding for the application
      flags:
        --auth: Install authentication UI scaffolding
        --option=: Pass an option to the preset command
    - name: ui:auth [--views] [--force] [--] [<type>]
      description: Scaffold basic login and registration views and routes
      flags:
        --force: Overwrite existing views by default
        --views: Only scaffold the authentication views
    - name: ui:controllers
      description: Scaffold the authentication controllers
    - name: up
      description: Bring the application out of maintenance mode
    - name: vendor:publish [--existing] [--force] [--all] [--provider [PROVIDER]] [--tag [TAG]]
      description: Publish any publishable assets from vendor packages
      flags:
        --all: Publish assets for all service providers without prompt
        --existing: Publish and overwrite only the files that have already been published
        --force: Overwrite any existing files
        --provider=: The service provider that has assets you want to publish
        --tag=: One or many tags that have assets you want to publish
    - name: view:cache
      description: Compile all of the application's Blade templates
    - name: view:clear
      description: Clear all compiled view files
